using System;
using System.Windows.Forms;
using System.IO;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Imaging;
using System.Text.RegularExpressions;
using System.Reflection;
using Hanhua.CompressTools;
using Hanhua.Common;

namespace Hanhua.TextEditTools.Bio0Edit
{
    public partial class Bio0TextEditor : BaseForm
    {
        #region " 本地变量 "

        #region " 共通字库 "

        /// <summary>
        /// 第一个Page的字符
        /// </summary>
        private string[] jCharPage = new string[] 
        {
           ""  , ""  , ""  , ""  , "" , ""   , ""  , ""  , ""  , "0" , "1" , "2" , "3" , "4" , "5" , "6", 
           "7" , "8" , "9" , "A" , "B" , "C" , "D" , "E" , "F" , "G" , "H" , "I" , "J" , "K" , "L" , "M", 
           "N" , "O" , "P" , "Q" , "R" , "S" , "T" , "U" , "V" , "W" , "X" , "Y" , "Z" , "a" , "b" , "c", 
           "d" , "e" , "f" , "g" , "h" , "i" , "j" , "k" , "l" , "m" , "n" , "o" , "p" , "q" , "r" , "s", 
           "t" , "u" , "v" , "w" , "x" , "y" , "z" , "　", "あ", "い", "う", "え", "お", "か", "き", "く", 
           "け", "こ", "さ", "し", "す", "せ", "そ", "た", "ち", "つ", "て", "と", "な", "に", "ぬ", "ね"
        };

        /// <summary>
        /// 第二个Page的字符
        /// </summary>
        private string[] jCharPage60 = new string[]
        {
           "の", "は", "ひ", "ふ", "へ", "ほ", "ま", "み", "む", "め", "も", "や", "ゆ", "よ", "ら", "り", 
           "る", "れ", "ろ", "わ", "を", "ん", "が", "ぎ", "ぐ", "げ", "ご", "ざ", "じ", "ず", "ぜ", "ぞ", 
           "だ", "ぢ", "づ", "で", "ど", "ば", "び", "び", "べ", "ど", "ぱ", "ぴ", "ぷ", "ぺ", "ぽ", "ぁ", 
           "ぃ", "ぅ", "ぇ", "ぉ", "っ", "ゃ", "ゅ", "ょ", "築", "過", "爪", "痕", "至", "台", "资", "暗", 
           "息", "速", "途", "襲", "圖", "計", "洗", "；", ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , 
           ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  ,
           ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  ,
           ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  ,
           ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  ,
           ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  ,
           ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , "ア", "イ", "ウ", "エ", "オ", "カ", "キ", "ク",
           "ケ", "コ", "サ", "シ", "ス", "セ", "ソ", "タ", "チ", "ツ", "テ", "ト", "ナ", "ニ", "ヌ", "ネ",
           "ノ", "ハ", "ヒ", "フ", "ヘ", "ホ", "マ", "ミ", "ム", "メ", "モ", "ヤ", "ユ", "ヨ", "ラ", "リ",
           "ル", "レ", "ロ", "ワ", "ヲ", "ン", "ガ", "ギ", "ゴ", "ゲ", "ゴ", "ザ", "ジ", "ズ", "ゼ", "ゾ",
           "ダ", "ヂ", "ズ", "デ", "ド", "バ", "ビ", "ブ", "ベ", "ボ", "パ", "ピ", "プ", "ペ", "ポ", "ヴ",
           "ァ", "ィ", "ゥ", "ェ", "ォ", "ッ", "ャ", "ュ", "ョ", "ー", "Ｓ", "Ｔ", "Ａ", "Ｒ", "±", "℃"
        };

        /// <summary>
        /// 第三个Page的字符
        /// </summary>
        private string[] jCharPage61 = new string[]
        {
           "＋", "＝", "。", "←", "→", "、", "。", "゜", "…", "：", "！", "?", "（", "）", "「", "」",
           "『", "』", "〇", "ー", "‐", "”", "“", "×", "／", "’", "，", "▽", "▷", "△", "※", "明",
           "续", "场", "合", "开", ""  , ""  , ""  , ""  , "扔", "押", "源", "指", "示", "取", "從", "书",
           "生", "说", "体", "电", "读", "发", "閉", "本", "↑", "↓", ""  , ""  , ""  , ""  , ""  , "",
           ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""
        };


        /// <summary>
        /// 第一个Page的字符
        /// </summary>
        private string[] cCharPage = new string[] 
        {
           ""  , ""  , ""  , ""  , "" , ""   , ""  , ""  , ""  , "0" , "1" , "2" , "3" , "4" , "5" , "6", 
           "7" , "8" , "9" , "A" , "B" , "C" , "D" , "E" , "F" , "G" , "H" , "I" , "J" , "K" , "L" , "M", 
           "N" , "O" , "P" , "Q" , "R" , "S" , "T" , "U" , "V" , "W" , "X" , "Y" , "Z" , "a" , "b" , "c", 
           "d" , "e" , "f" , "g" , "h" , "i" , "j" , "k" , "l" , "m" , "n" , "o" , "p" , "q" , "r" , "s", 
           "t" , "u" , "v" , "w" , "x" , "y" , "z" , "　", "的", "了", "有", "没", "像", "上", "要", "是", 
           "么", "好", "什", "被", "面", "在", "吗", "一", "着", "地", "个", "用", "不", "锁", "下", "作"
        };

        /// <summary>
        /// 第二个Page的字符
        /// </summary>
        private string[] cCharPage60 = new string[]
        {
           "已", "经", "很", "方", "里", "到", "子", "放", "动", "大", "品", "装", "进", "法", "卡", "置", 
           "去", "行", "使", "无", "入", "以", "物", "话", "都", "可", "人", "出", "操", "画", "力", "特", 
           "现", "别", "坏", "中", "这", "门", "掉", "从", "来", "车", "记", "钥", "匙", "梯", "打", "调", 
           "得", "关", "还", "看", "西", "过", "水", "东", "插", "药", "机", "手", "槽", "器", "也", "除",
           "色", "通", "解", "转", "意", "就", "危", "险", "时", "必", "具", "种", "火", "运", "但", "处", 
           "如", "样", "对", "给", "升", "盘", "密", "能", ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  ,
           ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  ,
           ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  ,
           ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  ,
           ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  ,
           ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , "部", "果", "拿", "值", "注", "起", "启", "整", 
           "乘", "针", "间", "成", "按", "实", "码", "存", "请", "定", "和", "所", "制", "让", "天", "降", 
           "容", "完", "把", "板", "输", "室", "理", "化", "型", "片", "活", "迹", "列", "始", "落", "路", 
           "小", "们", "消", "房", "瑞", "贝", "多", "拉", "只", "工", "断", "员", "各", "写", "女", "再", 
           "养", "散", "焰", "吧", "些", "左", "右", "供", "需", "量", "全", "正", "或", "件", "古", "光", 
           "性", "分", "感", "道", "虽", "然", "初", "务", "留", "查", "Ｓ", "Ｔ", "Ａ", "Ｒ", "±", "℃"
        };

        /// <summary>
        /// 第三个Page的字符
        /// </summary>
        private string[] cCharPage61 = new string[]
        {
           "＋", "＝", "。", "←", "→", "、", "。", "゜", "…", "：", "！", "?", "（", "）", "「", "」",
           "『", "』", "〇", "ー", "‐", "”", "“", "×", "／", "’", "，", "▽", "▷", "△", "※", "觉",
           "应", "其", "系", "数", "外", "内", "组", "类", "刻", "显", "统", "保", "档", "取", "同", "角",
           "于", "状", "为", "弹", "我", "会", "枪", "击", "↑", "↓", "钮", "那", "蛭", "究", "开", "研",
           "日", "后", "态", "合", "设", "草", "换", "长", "变", "游", "戏", "备", "斯", "高", "示", "比"
        };

        /// <summary>
        /// 共通的旧的中文字符
        /// </summary>
        private string[] comOldFont = new string[] {
            ""  , "0" , "1" , "2" , "3" , "4" , "5" , "6", "7" , "8" , "9" , "A" , "B" , "C" , "D" , "E" , "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
            "F" , "G" , "H" , "I" , "J" , "K" , "L" , "M", "N" , "O" , "P" , "Q" , "R" , "S" , "T" , "U" , "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
            "V" , "W" , "X" , "Y" , "Z" , "a" , "b" , "c", "d" , "e" , "f" , "g" , "h" , "i" , "j" , "k" , "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
            "l" , "m" , "n" , "o" , "p" , "q" , "r" , "s", "t" , "u" , "v" , "w" , "x" , "y" , "z" , "　",  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
            "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
            "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",  "", "", "Ｓ", "Ｔ", "Ａ", "Ｒ", "±", "℃", "＋", "＝", "。", "←", "→", "、", "。", "゜", 
            "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "…", "：", "！", "?" , "（", "）", "「", "」","『", "』" , "〇", "ー", "‐", "”", "“", "×",
            "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "／", "’", "，", "▽", "▷" , "△", "※", "", "", "", "", "", "", "", "", "", 
            "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
            "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "↑", "↓", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
            "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""
        };

        #region " 临时 "

        /// <summary>
        /// 共通字库
        /// </summary>
        private string[] jfontCom = new string[] 
        {
           ""  , "0" , "1" , "2" , "3" , "4" , "5" , "6", "7" , "8" , "9" , "A" , "B" , "C" , "D" , "E" , 
           "F" , "G" , "H" , "I" , "J" , "K" , "L" , "M", "N" , "O" , "P" , "Q" , "R" , "S" , "T" , "U" , 
           "V" , "W" , "X" , "Y" , "Z" , "a" , "b" , "c", "d" , "e" , "f" , "g" , "h" , "i" , "j" , "k" , 
           "l" , "m" , "n" , "o" , "p" , "q" , "r" , "s", "t" , "u" , "v" , "w" , "x" , "y" , "z" , "　", 
           "あ", "い", "う", "え", "お", "か", "き", "く", "け", "こ", "さ", "し", "す", "せ", "そ", "た", 
           "ち", "つ", "て", "と", "な", "に", "ぬ", "ね", "の", "は", "ひ", "ふ", "へ", "ほ", "ま", "み", 
           "む", "め", "も", "や", "ゆ", "よ", "ら", "り", "る", "れ", "ろ", "わ", "を", "ん", "が", "ぎ", 
           "ぐ", "げ", "ご", "ざ", "じ", "ず", "ぜ", "ぞ", "だ", "ぢ", "づ", "で", "ど", "ば", "び", "び", 
           "べ", "ど", "ぱ", "ぴ", "ぷ", "ぺ", "ぽ", "ぁ", "ぃ", "ぅ", "ぇ", "ぉ", "っ", "ゃ", "ゅ", "ょ", 
           "築", "過", "爪", "痕", "至", "台", "资", "暗", "息", "速", "途", "襲", "圖", "計", "洗", "；", 
           ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , 
           //""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , 
           //""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , 
           //""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , 
           //""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , 
           //""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , 
           "ア", "イ", "ウ", "エ", "オ", "カ", "キ", "ク", "ケ", "コ", "サ", "シ", "ス", "セ", "ソ", "タ", 
           "チ", "ツ", "テ", "ト", "ナ", "ニ", "ヌ", "ネ", "ノ", "ハ", "ヒ", "フ", "ヘ", "ホ", "マ", "ミ", 
           "ム", "メ", "モ", "ヤ", "ユ", "ヨ", "ラ", "リ", "ル", "レ", "ロ", "ワ", "ヲ", "ン", "ガ", "ギ", 
           "ゴ", "ゲ", "ゴ", "ザ", "ジ", "ズ", "ゼ", "ゾ", "ダ", "ヂ", "ズ", "デ", "ド", "バ", "ビ", "ブ", 
           "ベ", "ボ", "パ", "ピ", "プ", "ペ", "ポ", "ヴ", "ァ", "ィ", "ゥ", "ェ", "ォ", "ッ", "ャ", "ュ", 
           "ョ", "ー", "Ｓ", "Ｔ", "Ａ", "Ｒ", "±", "℃", "＋", "＝", "。", "←", "→", "、", "。", "゜",
           "…", "：", "！", "?" , "（", "）", "「", "」", "『", "』", "〇", "ー", "‐", "”", "“", "×", 
           "／", "’", "，", "▽", "▷" , "△", "※", "明", "续", "场", "合", "开", ""  , ""  , ""  , ""  , 
           "扔", "押", "源", "指", "示", "取", "從", "书", "生", "说", "体", "电", "读", "发", "閉", "本", 
           "↑", "↓", ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , 
           ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , 
           //""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , 
           //""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , 
           //""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , 
           //""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , 
           //""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""
        };

        /// <summary>
        /// 共通字库
        /// </summary>
        private string[] cfontCom = new string[] 
        {
           ""  , "0" , "1" , "2" , "3" , "4" , "5" , "6", "7" , "8" , "9" , "A" , "B" , "C" , "D" , "E" , 
           "F" , "G" , "H" , "I" , "J" , "K" , "L" , "M", "N" , "O" , "P" , "Q" , "R" , "S" , "T" , "U" , 
           "V" , "W" , "X" , "Y" , "Z" , "a" , "b" , "c", "d" , "e" , "f" , "g" , "h" , "i" , "j" , "k" , 
           "l" , "m" , "n" , "o" , "p" , "q" , "r" , "s", "t" , "u" , "v" , "w" , "x" , "y" , "z" , "　", 
           "あ", "い", "う", "え", "お", "か", "き", "く", "け", "こ", "さ", "し", "す", "せ", "そ", "た", 
           "ち", "つ", "て", "と", "な", "に", "ぬ", "ね", "の", "は", "ひ", "ふ", "へ", "ほ", "ま", "み", 
           "む", "め", "も", "や", "ゆ", "よ", "ら", "り", "る", "れ", "ろ", "わ", "を", "ん", "が", "ぎ", 
           "ぐ", "げ", "ご", "ざ", "じ", "ず", "ぜ", "ぞ", "だ", "ぢ", "づ", "で", "ど", "ば", "び", "び", 
           "べ", "ど", "ぱ", "ぴ", "ぷ", "ぺ", "ぽ", "ぁ", "ぃ", "ぅ", "ぇ", "ぉ", "っ", "ゃ", "ゅ", "ょ", 
           "築", "過", "爪", "痕", "至", "台", "资", "暗", "息", "速", "途", "襲", "圖", "計", "洗", "；", 
           ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , 
           //""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , 
           //""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , 
           //""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , 
           //""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , 
           //""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , 
           "ア", "イ", "ウ", "エ", "オ", "カ", "キ", "ク", "ケ", "コ", "サ", "シ", "ス", "セ", "ソ", "タ", 
           "チ", "ツ", "テ", "ト", "ナ", "ニ", "ヌ", "ネ", "ノ", "ハ", "ヒ", "フ", "ヘ", "ホ", "マ", "ミ", 
           "ム", "メ", "モ", "ヤ", "ユ", "ヨ", "ラ", "リ", "ル", "レ", "ロ", "ワ", "ヲ", "ン", "ガ", "ギ", 
           "ゴ", "ゲ", "ゴ", "ザ", "ジ", "ズ", "ゼ", "ゾ", "ダ", "ヂ", "ズ", "デ", "ド", "バ", "ビ", "ブ", 
           "ベ", "ボ", "パ", "ピ", "プ", "ペ", "ポ", "ヴ", "ァ", "ィ", "ゥ", "ェ", "ォ", "ッ", "ャ", "ュ", 
           "ョ", "ー", "Ｓ", "Ｔ", "Ａ", "Ｒ", "±", "℃", "＋", "＝", "。", "←", "→", "、", "。", "゜",
           "…", "：", "！", "?" , "（", "）", "「", "」", "『", "』", "〇", "ー", "‐", "”", "“", "×", 
           "／", "’", "，", "▽", "▷" , "△", "※", "明", "续", "场", "合", "开", ""  , ""  , ""  , ""  , 
           "扔", "押", "源", "指", "示", "取", "從", "书", "生", "说", "体", "电", "读", "发", "閉", "本", 
           "↑", "↓", ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , 
           ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , 
           //""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , 
           //""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , 
           //""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , 
           //""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , 
           //""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""
        };

        #endregion

        #endregion

        #region " jfont01字库 "

        /// <summary>
        /// jfont01字库
        /// </summary>
        private string[] jfont01 = new string[] {
            "　","恶","压","扱","安","暗","安","闇","以","依","囲","威","意","易","椅","異","移","衣","違","医","井","育","一","溢","员","引","飲","陰","隠","右","雨","運",
"雲","影","映","液","炎","绿","污","央","奥","应","王","屋","下","化","何","価","加","可","果","火","禍","稼","荷","華","過","画","会","解","回","坏","怪","械",
"海","灰","界","皆","绘","開","階","外","崖","格","獲","觉","角","革","学","额","掛","卷","完","干","感","惯","管","簡","缶","間","関","館","眼","顽","危","器",
"基","奇","寄","机","期","棄","機","気","规","贵","起","骑","儀","戯","技","詰","客","脚","及","急","朽","泣","球","究","给","去","巨","供","叫","强","恐","挟",
"桥","胸","镜","響","業","均","禁","茵","近","金","苦","躯","驱","具","空","隅","繰","训","群","係","型","形","惠","景","繋","计","警","激","桁","决","穴","血",
"剑","坚","建","检","研","肩","见","键","险","验","元","原","箇","古","呼","固","库","户","枯","湖","后","御","護","光","口","向","孔","工","巧","广","拘","構",
"膏","荒","行","衡","降","香","高","合","拷","豪","刻","告","黑","骨","込","今","根","混","痕","魂","左","差","查","锁","座","最","塞","彩","济","碎","祭","细",
"剂","材","作","栅","索","册","雑","錆","皿","三","参","散","残","仕","使","刺","四","士","姿","子","指","施","止","死","私","至","资","饲","事","字","慈","持",
"时","治","磁","自","識","失","室","实","写","社","者","车","遮","蛇","邪","弱","手","殊","種","酒","樹","囚","收","周","修","终","臭","衆","袭","集","充","徒",
"重","銃","出","術","处","处","所","女","除","伤","匠","小","少","床","掌","昇","消","照","肖","鍾","上","丈","乘","城","场","情","净","状","蒸","饰","植","燭",
"色","触","食","寝","新","深","真","神","亲","身","针","人","図","厨","吹","水","数","世","制","勢","性","成","整","盛","精","製","青","席","石","積","赤","迹",
"切","折","设","说","绝","先","专","尖","战","洗","染","线","選","前","善","然","全","礎","粗","倉","壮","層","操","早","巣","槍","槽","争","窓","草","装","走",
"送","像","增","臓","蔵","造","侧","息","柬","测","足","速","续","存","损","他","多","打","待","態","替","袋","队","代","台","大","訳","脱","棚","谁","探","短",
"壇","弹","断","暖","段","男","值","知","地","置","迟","筑","着","中","柱","注","虫","著","彫","调","长","直","沈","追","通","壺","爪","停","定","帝","底","程",
"滴","的","铁","天","转","点","渡","登","途","度","倒","投","东","灯","当","等","到","逃","陶","头","动","洞","道","得","特","毒","突","届","鈍","内","难","匂",
"日","乳","入","忍","濡","熟","年","燃","粘","纳","能","覗","波","破","婆","马","废","排","背","配","培","秤","剥","白","箱","拔","半","反","搬","盘","悲","扉",
"避","飞","備","美","鼻","必","标","漂","表","描","品","瓶","不","付","妇","浮","腐","武","舞","部","风","復","服","覆","物","分","喷","文","聞","并","壁","变",
"片","边","保","捕","母","簿","包","崩","抱","捧","放","方","剖","房","坊","暴","防","没","磨","魔","枚","末","万","满","味","脉","妙","務","無","名","命","明",
"滅","面","模","綱","木","目","戻","問","悶","門","役","薬","油","优","勇","由","雄","予","幼","妖","容","样","洋","用","要","養","翼","裸","落","乱","卵","利",
"理","立","流","溜","留","了","料","凉","療","良","量","力","绿","隣","類","冷","列","劣","裂","练","連","炉","路","漏","牢","老","六","话","唸","埃","檻","狡",
"狡","睨","輌","監","记","限","採","酸","始","视","舍","宿","对","堂","拜","离","硫","礼","録","々","助","","","","","","","","","","",""
        };

        #endregion

        #region " jfont02字库 "

        /// <summary>
        /// jfont02字库
        /// </summary>
        private string[] jfont02 = new string[] {
            "々","愛","悪","握","安","以","位","尉","意","異","移","域","育","一","员","右","熱","隠","運","影","栄","锐","液","越","炎","污","奥","应","黄","屋","音","下",
"化","何","加","可","果","火","荷","我","画","会","解","回","壊","怪","改","械","海","界","開","階","外","各","格","殻","確","角","学","掛","鞄","巻","完","官",
"幹","感","換","環","監","管","間","関","丸","颜","危","器","基","奇","寄","希","期","棄","機","帰","気","规","記","起","騎","擬","議","詰","客","逆","急","救",
"求","球","究","级","给","巨","许","供","共","协","境","强","恐","教","况","脅","興","驚","業","極","禁","菌","近","金","銀","句","区","苦","具","愚","空","繰",
"君","郡","軍","刑","型","形","系","经","撃","激","決","穴","結","血","月","件","兼","检","権","犬","研","见","险","验","元","原","现","言","限","個","古","呼",
"固","己","库","故","五","后","御","護","交","候","光","公","功","效","厚","口","向","坑","好","工","幸","拘","攻","更","構","溝","硬","考","荒","行","郊","降",
"高","号","合","刻","国","黑","腰","込","今","困","婚","根","差","查","锁","座","再","最","採","祭","细","剂","在","材","罪","作","策","索","札","杀","三","山",
"散","产","酸","残","仕","使","司","四","士","始","姿","子","思","支","施","止","死","私","紫","视","诗","试","誌","饲","事","字","持","时","磁","自","式","識",
"執","失","室","質","实","舍","写","射","社","者","车","邪","弱","主","守","手","殊","狩","種","受","囚","收","就","秀","终","习","集","充","十","重","銃","宿",
"出","准","纯","巡","顺","处","初","所","诸","助","女","除","赏","胜","召","小","少","掌","升","消","烧","照","详","象","障","上","乘","场","常","情","净","状",
"錠","饰","殖","織","色","触","食","信","心","新","森","侵","深","真","亲","身","进","针","人","厨","水","数","世","是","制","势","性","成","整","晴","正","精",
"西","诚","誓","青","静","席","石","籍","责","赤","迹","切","接","设","節","绝","舌","先","专","战","洗","染","线","践","选","前","然","全","狙","礎","祖","素",
"组","诉","创","仓","想","搜","操","早","相","窓","装","走","送","像","增","藏","侧","柬","足","续","卒","铁","存","损","他","多","太","打","駄","对","待","态",
"替","袋","退","队","代","大","第","题","択","達","誰","単","担","探","誕","団","弾","断","段","値","知","地","置","茶","着","中","忠","注","虫","著","貯","兆",
"张","微","听","调","长","直","沈","追","通","低","停","定","底","延","抵","程","敌","的","適","徽","展","贴","转","点","传","渡","登","度","奴","倒","投","东",
"当","踏","头","动","同","堂","道","得","特","毒","独","突","届","内","迷","南","难","二","日","乳","入","任","认","脱","年","念","冉","浓","能","派","破","弃",
"背","配","倍","剥","博","白","迫","爆","莫","肌","拔","判","半","反","班","繁","般","番","盘","彼","扉","比","秘","肥","非","備","匹","必","标","表","描","品",
"频","不","付","普","武","部","封","副","復","服","払","物","分","文","聞","兵","并","别","变","片","编","返","保","捕","補","簿","报","宝","棒","放","方","法",
"胞","亡","房","望","棒","谋","防","北","没","魔","抹","万","味","未","密","务","无","名","命","滅","面","模","木","默","目","戻","問","混","役","薬","優","由",
"融","予","与","容","样","用","叶","要","阳","养","欲","翼","来","赖","雷","落","卵","览","利","理","裏","離","律","率","立","流","硫","了","两","料","猟","良",
"量","力","绿","類","令","例","隷","齢","列","连","路","录","话","肋","哺","榴","炸","↑","↓","夷","遗","害","枠","挥","次","撤","家","远","天","济","引","甲"
        };

        #endregion

        #region " jfont03字库 "

        /// <summary>
        /// jfont03字库
        /// </summary>
        private string[] jfont03 = new string[] {
            "恶", "丈", "暗", "以", "置", "着", "为", "人", "移", "第", "前", "犯", "员", "引", "动", "运",
           "夫", "早", "装", "走", "炎", "污", "应", "中", "了", "下", "何", "化", "力", "火", "部", "列",
           "过", "间", "会", "解", "分", "知", "尉", "避", "开", "场", "外", "要", "送", "掛", "像", "完",
           "待", "理", "认", "危", "落", "基", "齐", "闻", "大", "气", "来", "起", "米", "古", "命", "急",
           "究", "子", "供", "转", "点", "破", "新", "神", "近", "样", "空", "造", "特", "足", "续", "内",
           "风", "体", "结", "目", "件", "研", "见", "代", "险", "验", "役", "源", "保", "书", "助", "除",
           "御", "少", "杀", "口", "行", "降", "减", "当", "合", "名", "明", "告", "数", "込", "務", "無", 
           "入", "查", "年", "確", "済", "複", "物", "作", "予", "容", "隊", "散", "残", "線", "長", "通", 
           "士", "定", "止", "死", "資", "事", "食", "持", "礎", "上", "示", "制", "成", "全", "实", "社",
           "车", "邪", "度", "手", "设", "先", "终", "博", "集", "暴", "出", "初", "所", "调", "料", "发",
           "停", "魔", "现", "在", "地", "消", "烧", "一", "二", "三", "四", "五", "六", "七", "八", "九",
           "十", "巡", "任", "俺", "饰", "秘", "同", "时", "用", "兵", "器", "得", "更", "强", "止", "好",
           "必", "自", "爆", "殲", "軍", "激", "台", "諸", "逃", "言", "報", "刑", "　", "向", "連", "養",
           "薬", "品", "点", "今", "捧", "教", "町", "　", "包", "相", "次", "齢", "才", "决", "脱", "末", 

           "森", "嬢", "錠", "逮", "捕", "突", "原", "住", "願", "孔", "疑", "信", "恐", "思", "话", "偽",
           "情", "绪", "令", "暦", "詳", "柬", "答", "教", "本", "坑", "窓", "弱", "頭", "互", "協", "危",
           "真", "似", "赦", "構", "络", "脱", "衝", "銃", "处", "孙", "光", "军", "約", "更", "肩", "害",
           "両", "守", "使", "棄", "掘", "民", "流", "废", "援", "院", "精", "護", "级", "退", "妇", "警",
           "经", "歴", "違", "反", "総", "絶", "対", "踊", "帰", "還", "仕", "袭", "歴", "彼", "届", "甲",
           "斐", "搜", "索", "私", "訳", "击", "業", "道", "女", "王", "日", "執", "无", "畜", "位", "科",
           "戒", "期", "呼", "后", "然", "野", "郎", "谁", "方", "困", "驚", "喋", "皆", "", "", "",
           "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
           "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
           "", "", "", ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  ,
           ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  ,
           ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  ,
           ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  
        };

        #endregion

        #region " jfont04字库 "

        /// <summary>
        /// jfont04字库
        /// </summary>
        private string[] jfont04 = new string[] {
            "恶", "丈", "暗", "以", "置", "着", "为", "人", "移", "第", "前", "犯", "员", "引", "动", "运",
           "夫", "早", "装", "走", "炎", "污", "应", "中", "了", "下", "何", "化", "力", "火", "部", "列",
           "过", "间", "会", "解", "分", "知", "尉", "避", "开", "场", "外", "要", "送", "掛", "像", "完",
           "待", "理", "认", "危", "落", "基", "齐", "闻", "大", "气", "来", "起", "米", "古", "命", "急",
           "究", "子", "供", "转", "点", "破", "新", "神", "近", "样", "空", "造", "特", "足", "续", "内",
           "风", "体", "结", "目", "件", "研", "见", "代", "险", "验", "役", "源", "保", "书", "助", "除",
           "御", "少", "杀", "口", "行", "降", "减", "当", "合", "名", "明", "告", "数", "込", "務", "無", 
           "入", "查", "年", "確", "済", "複", "物", "作", "予", "容", "隊", "散", "残", "線", "長", "通", 
           "士", "定", "止", "死", "資", "事", "食", "持", "礎", "上", "示", "制", "成", "全", "实", "社",
           "车", "邪", "度", "手", "设", "先", "终", "博", "集", "暴", "出", "初", "所", "调", "料", "发",
           "停", "魔", "现", "在", "地", "消", "烧", "一", "二", "三", "四", "五", "六", "七", "八", "九",
           "十", "巡", "任", "俺", "饰", "秘", "同", "时", "用", "兵", "器", "得", "更", "强", "止", "好",
           "必", "自", "爆", "殲", "軍", "激", "台", "諸", "逃", "言", "報", "刑", "　", "向", "連", "養",
           "薬", "品", "点", "今", "捧", "教", "町", "　", "包", "相", "次", "齢", "才", "决", "脱", "末", 
           "壁", "後", "況", "孤", "受", "誓", "世", "災", "断", "猟", "想", "緊", "陸", "律", "服", "別",
           "郎", "面", "西", "女", "凶", "々", "蘇", "際", "放", "祖", "去", "楽", "吹", "正", "幸", "晴",
           "状", "捨", "私", "果", "離", "犠", "牲", "者", "獄", "諸", "城", "徒", "若", "潮", "戦", "追",
           "局", "位", "候", "男", "辺", "壊", "国", "議", "闘", "彼", "海", "施", "誠", "絶", "提", "讐",
           "王", "郊", "返", "漏", "伝", "最", "姿", "囚", "探", "熱", "病", "尽", "跡", "野", "襲", "皆",
           "執", "量", "島", "粛", "周", "隠", "元", "未", "忠", "的", "幹", "始", "補", "潜", "貴", "倒",
           "法", "市", "宴", "夢", "企", "業", "索", "謎", "創", "端", "洋", "館", "対", "戻", "月", "日",
           "態", "　", "密", "厳", "捜", "我", "指", "多", "油", "林", "奥", "既", "誰", "君", "身", "染",
           "規", "達", "葬", "歴", "信", "奴", "遊", "念", "静", "给", "真", "警", "察", "璧", "撃", "針",
           "喋", "仲", "街", ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  ,
           ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  ,
           ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  ,
           ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  , ""  
        };

        #endregion

        /// <summary>
        /// 记录字库jpfont01信息
        /// </summary>
        private Dictionary<int, Bio0CharInfo[]> jpFont01CharPage = new Dictionary<int, Bio0CharInfo[]>();

        /// <summary>
        /// 记录字库jpfont02信息
        /// </summary>
        private Dictionary<int, Bio0CharInfo[]> jpFont02CharPage = new Dictionary<int, Bio0CharInfo[]>();

        /// <summary>
        /// 记录字库jpfont03信息
        /// </summary>
        private Dictionary<int, Bio0CharInfo[]> jpFont03CharPage = new Dictionary<int, Bio0CharInfo[]>();

        /// <summary>
        /// 记录字库jpfont04信息
        /// </summary>
        private Dictionary<int, Bio0CharInfo[]> jpFont04CharPage = new Dictionary<int, Bio0CharInfo[]>();

        /// <summary>
        /// 记录当前使用字库
        /// </summary>
        private Dictionary<int, Bio0CharInfo[]> jpFontCharPage;

        /// <summary>
        /// 记录字库cnfont01信息
        /// </summary>
        private Dictionary<int, Bio0CharInfo[]> cnFont01CharPage = new Dictionary<int, Bio0CharInfo[]>();

        /// <summary>
        /// 记录字库cnfont02信息
        /// </summary>
        private Dictionary<int, Bio0CharInfo[]> cnFont02CharPage = new Dictionary<int, Bio0CharInfo[]>();

        /// <summary>
        /// 记录字库cnfont03信息
        /// </summary>
        private Dictionary<int, Bio0CharInfo[]> cnFont03CharPage = new Dictionary<int, Bio0CharInfo[]>();

        /// <summary>
        /// 记录字库cnfont04信息
        /// </summary>
        private Dictionary<int, Bio0CharInfo[]> cnFont04CharPage = new Dictionary<int, Bio0CharInfo[]>();

        /// <summary>
        /// 记录当前使用的中文字库
        /// </summary>
        private Dictionary<int, Bio0CharInfo[]> cnFontCharPage;

        /// <summary>
        /// 记录所有文本文件
        /// </summary>
        private List<FilePosInfo> textFiles = new List<FilePosInfo>();

        /// <summary>
        /// Message文件中的文本使用的字库
        /// </summary>
        private Dictionary<string, Dictionary<int, Bio0CharInfo[]>> jpMessageTextFont = new Dictionary<string, Dictionary<int, Bio0CharInfo[]>>();

        /// <summary>
        /// Message文件中的文本使用的字库
        /// </summary>
        private Dictionary<string, Dictionary<int, Bio0CharInfo[]>> cnMessageTextFont = new Dictionary<string, Dictionary<int, Bio0CharInfo[]>>();

        /// <summary>
        /// 字库01
        /// </summary>
        private const string cnFont01 = @"..\BioTools\Bio0Edit\Bio0CnFont01.txt";

        /// <summary>
        /// 字库02
        /// </summary>
        private const string cnFont02 = @"..\BioTools\Bio0Edit\Bio0CnFont02.txt";

        /// <summary>
        /// 字库03
        /// </summary>
        private const string cnFont03 = @"..\BioTools\Bio0Edit\Bio0CnFont03.txt";

        /// <summary>
        /// 字库04
        /// </summary>
        private const string cnFont04 = @"..\BioTools\Bio0Edit\Bio0CnFont04.txt";

        /// <summary>
        /// 记录Message的Entry
        /// </summary>
        private List<int> textEntrys = new List<int>();

        /// <summary>
        /// 是否存在文本映射表
        /// </summary>
        private bool hasEntry;

        /// <summary>
        /// 保存旧的文本的长度，为了保存时验证中文的文本长度是否变化
        /// </summary>
        private int oldTextLen = 0;

        /// <summary>
        /// 设置中文输入的开始位置
        /// </summary>
        private int inputCnStartPos = 0;

        /// <summary>
        /// 设置中文输入的结束位置
        /// </summary>
        private int inputCnEndPos = 0;

        /// <summary>
        /// 当前编辑的文件
        /// </summary>
        private string cnText;

        /// <summary>
        /// 当前的中文字库文本文件
        /// </summary>
        private string cnFont;

        /// <summary>
        /// 导出的文件
        /// </summary>
        private string exportName;

        /// <summary>
        /// 判断是Wii还是Ngc
        /// </summary>
        private bool isWii = true;

        /// <summary>
        /// Wii汉化时的一个目录
        /// </summary>
        private string filesFolder = @"\files";

        /// <summary>
        /// 压缩，解压缩工具
        /// </summary>
        private BaseComp comp = new Bio0LzComp();

        #endregion

        /// <summary>
        /// 生化危机0文本编辑器
        /// </summary>
        public Bio0TextEditor(string folder)
        {
            InitializeComponent();

            this.ResetHeight();

            this.txtCn.OtherRichTextBox = this.txtJp;

            // 判断是Wii还是Ngc汉化
            if (folder.IndexOf("Ngc", StringComparison.OrdinalIgnoreCase) >= 0)
            {
                this.isWii = false;
                this.filesFolder = string.Empty;
            }

            // 初始化文本开始位置
            this.baseFolder = folder;
            this.InitStartPos(folder);

            // 读取字库信息
            this.ReadFontChar();

            // 选中第一个文件
            this.fileList.SelectedIndex = 0;

            // 绑定事件
            this.rdoFont1.CheckedChanged += new EventHandler(this.rdoFont_CheckedChanged);
            this.rdoFont2.CheckedChanged += new EventHandler(this.rdoFont_CheckedChanged);
            this.rdoFont3.CheckedChanged += new EventHandler(this.rdoFont_CheckedChanged);
            this.rdoFont4.CheckedChanged += new EventHandler(this.rdoFont_CheckedChanged);
            this.rdoImg.CheckedChanged += new EventHandler(this.rdoFont_CheckedChanged);
            this.rdoAll.CheckedChanged += new EventHandler(this.rdoFont_CheckedChanged);
            this.exportName = this.rdoFont1.Text;
        }

        #region " 事件 "

        /// <summary>
        /// 生成中文字库
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnCreateCnFont_Click(object sender, EventArgs e)
        {
            this.InitCnFont();

            this.ReadFontChar();
        }

        /// <summary>
        /// 保存文件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnSave_Click(object sender, EventArgs e)
        {
            try
            {
                if (this.Save())
                {
                    MessageBox.Show("保存成功。");
                }
            }
            catch (Exception me)
            {
                MessageBox.Show(me.Message);
            }
        }

        /// <summary>
        /// 文件变更
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void fileList_SelectedIndexChanged(object sender, EventArgs e)
        {
            // 设置文本
            FilePosInfo filePosInfo = this.textFiles[this.fileList.SelectedIndex];
            if (filePosInfo.TextType == Bio0TextType.Movie)
            {
                this.jpFontCharPage = this.jpFont04CharPage;
                this.txtJp.Text = this.ChangeFile(filePosInfo.File, filePosInfo.TextStart, filePosInfo.TextEnd, this.jpFontCharPage);

                this.cnFontCharPage = this.cnFont04CharPage;
                this.txtCn.Text = this.ChangeFile(filePosInfo.File + "_cn", filePosInfo.TextStart, filePosInfo.TextEnd, this.cnFontCharPage);
                this.cnFont = cnFont04;
            }
            else if (filePosInfo.TextType == Bio0TextType.Event)
            {
                this.jpFontCharPage = this.jpFont03CharPage;
                this.txtJp.Text = this.ChangeFile(filePosInfo.File, filePosInfo.TextStart, filePosInfo.TextEnd, this.jpFontCharPage);

                this.cnFontCharPage = this.cnFont03CharPage;
                this.txtCn.Text = this.ChangeFile(filePosInfo.File + "_cn", filePosInfo.TextStart, filePosInfo.TextEnd, this.cnFontCharPage);
                this.cnFont = cnFont03;
            }
            else if (filePosInfo.TextType == Bio0TextType.Scene)
            {
                this.jpFontCharPage = this.jpFont01CharPage;
                this.txtJp.Text = this.ChangeFile(filePosInfo.File, filePosInfo.TextStart, filePosInfo.TextEnd, this.jpFontCharPage);

                this.cnFontCharPage = this.cnFont01CharPage;
                this.txtCn.Text = this.ChangeFile(filePosInfo.File + "_cn", filePosInfo.TextStart, filePosInfo.TextEnd, this.cnFontCharPage);
                this.cnFont = cnFont01;
            }
            else if (filePosInfo.TextType == Bio0TextType.Main)
            {
                this.jpFontCharPage = filePosInfo.SubIndex == "_03" ? this.jpFont01CharPage : this.jpFont02CharPage;
                this.txtJp.Text = this.ChangeFile(filePosInfo.File, filePosInfo.TextStart, filePosInfo.TextEnd, this.jpFontCharPage);

                this.cnFontCharPage = filePosInfo.SubIndex == "_03" ? this.cnFont01CharPage : this.cnFont02CharPage;
                this.txtCn.Text = this.ChangeFile(filePosInfo.File + "_cn", filePosInfo.TextStart, filePosInfo.TextEnd, this.cnFontCharPage);
                this.cnFont = filePosInfo.SubIndex == "_03" ? cnFont01 : cnFont02;
            }
            else
            {
                this.jpFontCharPage = this.jpMessageTextFont[Util.GetShortName(filePosInfo.File)];
                this.txtJp.Text = this.ChangeFile(filePosInfo.File, filePosInfo.TextStart, filePosInfo.TextEnd, this.jpFontCharPage);

                this.cnFontCharPage = this.cnMessageTextFont[Util.GetShortName(filePosInfo.File)];
                this.txtCn.Text = this.ChangeFile(filePosInfo.File + "_cn", filePosInfo.TextStart, filePosInfo.TextEnd, this.cnFontCharPage);
                if (this.cnFontCharPage == this.cnFont01CharPage)
                {
                    this.cnFont = cnFont01;
                }
                else
                {
                    this.cnFont = cnFont02;
                }
            }

            // 设置文本映射表信息
            if (filePosInfo.TextEnd > 0)
            {
                this.hasEntry = false;
                this.oldTextLen = filePosInfo.TextEnd - filePosInfo.TextStart;
                this.inputCnStartPos = filePosInfo.TextStart;
                this.inputCnEndPos = filePosInfo.TextEnd;
            }
            else
            {
                this.hasEntry = true;
                this.textEntrys.Clear();
                this.inputCnStartPos = filePosInfo.TextStart;
                
                // 将文件中的数据，读取到byData中
                FileStream fs = new FileStream(filePosInfo.File, FileMode.Open);
                byte[] byData = new byte[fs.Length];
                fs.Read(byData, 0, byData.Length);
                fs.Close();
                fs = null;

                int textCount = Util.GetOffset(byData, filePosInfo.TextStart, filePosInfo.TextStart + 3);
                for (int j = 0; j < textCount; j++)
                {
                    int pos = filePosInfo.TextStart + Util.GetOffset(byData, filePosInfo.TextStart + (j + 1) * 4, filePosInfo.TextStart + (j + 1) * 4 + 3);
                    this.textEntrys.Add(pos);

                    if (j == textCount - 1)
                    {
                        while ((byData[pos] != 0))
                        {
                            pos++;
                        }

                        if (filePosInfo.MaxLen > 0)
                        {
                            this.oldTextLen = filePosInfo.MaxLen;
                            this.inputCnEndPos = filePosInfo.TextStart + filePosInfo.MaxLen;
                        }
                        else
                        {
                            this.oldTextLen = pos - filePosInfo.TextStart;
                            this.inputCnEndPos = pos;
                        }
                    }
                }
            }

            this.cnText = filePosInfo.File + "_cn";
        }

        /// <summary>
        /// 查找文本
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnSaveAddr_Click(object sender, EventArgs e)
        {
            //// 查找Scene文本
            //string[] addrInfos = File.ReadAllLines(this.folder + @"\SceneAddr.txt", Encoding.UTF8);
            //for (int i = 0; i < addrInfos.Length; i += 2)
            //{
            //    string sceneFile = this.folder + @"\files\bio0\scene\" + addrInfos[i];
            //    byte[] fileBytes = File.ReadAllBytes(sceneFile);
            //    int oldSceneTxtLen = (fileBytes[0xC4] << 24) | (fileBytes[0xC5] << 16) | (fileBytes[0xC6] << 8) | fileBytes[0xC7];
            //    addrInfos[i + 1] = addrInfos[i + 1] + " " + oldSceneTxtLen.ToString("x");
            //}
            //File.WriteAllLines(this.folder + @"\SceneAddr.txt", addrInfos, Encoding.UTF8);

            //// 添加Event文本
            //addrInfos = File.ReadAllLines(this.folder + @"\EventAddr.txt", Encoding.UTF8);
            //for (int i = 0; i < addrInfos.Length; i += 2)
            //{
            //    string demoFile = this.folder + @"\files\bio0\demo\" + addrInfos[i];
            //    byte[] fileBytes = File.ReadAllBytes(demoFile);
            //    int oldSceneTxtLen = (fileBytes[0x44] << 24) | (fileBytes[0x45] << 16) | (fileBytes[0x46] << 8) | fileBytes[0x47];
            //    addrInfos[i + 1] = addrInfos[i + 1] + " " + oldSceneTxtLen.ToString("x");
            //}
            //File.WriteAllLines(this.folder + @"\EventAddr.txt", addrInfos, Encoding.UTF8);

            //FileStream fs = null;

            //List<FilePosInfo> testFiles = new List<FilePosInfo>();
            //List<FilePosInfo> fileNameInfo = Util.GetAllFiles(folder + @"\files\bio0\demo\").Where(p => p.FileName.EndsWith(".bio0dec") && !p.IsFolder).ToList();
            //foreach (FilePosInfo fileInfo in fileNameInfo)
            //{
            //    int startPos = this.SearchSceneTextStart(fileInfo.FileName);
            //    if (startPos >= 0)
            //    {
            //        FilePosInfo posInfo = new FilePosInfo(fileInfo.FileName);
            //        posInfo.TextType = Bio0TextType.Event;
            //        posInfo.TextStart = startPos;

            //        testFiles.Add(posInfo);
            //        //this.fileList.Items.Add(Util.GetShortName(fileInfo.FileName));
            //    }
            //}

            //List<FilePosInfo> sceneFils = testFiles.Where(p => p.TextType == Bio0TextType.Event).ToList();
            //string[] addrInfos = new string[sceneFils.Count * 2];
            //for (int i = 0; i < sceneFils.Count; i++)
            //{
            //    addrInfos[i * 2] = Util.GetShortName(sceneFils[i].File);
            //    addrInfos[i * 2 + 1] = sceneFils[i].TextStart.ToString("x");
            //}

            //File.WriteAllLines(this.folder + @"\SceneAddr_Event.txt", addrInfos, Encoding.UTF8);

            //if (string.IsNullOrEmpty(this.txtSearchKey.Text))
            //{
            //    MessageBox.Show("要输入查找文字");
            //    this.txtSearchKey.Focus();
            //    return;
            //}

            //StringBuilder sb = new StringBuilder();
            //string searchText = this.txtSearchKey.Text;
            //for (int j = 0; j < searchText.Length; j++)
            //{
            //    string key = searchText.Substring(j, 1);
            //    foreach (int fontPage in this.cnFontCharPage.Keys)
            //    {
            //        Bio0CharInfo[] pageFonts = this.cnFontCharPage[fontPage];
            //        bool findKey = false;
            //        for (int i = 0; i < pageFonts.Length; i++)
            //        {
            //            if (key == pageFonts[i].FontChar)
            //            {
            //                if (fontPage == 0)
            //                {
            //                    sb.Append(i.ToString("x")).Append(" ");
            //                }
            //                else
            //                {
            //                    sb.Append(fontPage.ToString("x")).Append(" ");
            //                    sb.Append(i.ToString("x")).Append(" ");
            //                }

            //                findKey = true;
            //                break;
            //            }
            //        }

            //        if (findKey)
            //        {
            //            break;
            //        }
            //    }
            //}

            //this.txtSearchKey.Text = sb.ToString();
        }

        /// <summary>
        /// 导出文本
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnExport_Click(object sender, EventArgs e)
        {
            this.ExoprtText();
        }

        /// <summary>
        /// 导入
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnImport_Click(object sender, EventArgs e)
        {
            // 打开要导入的文件
            this.baseFile = Util.SetOpenDailog("生化危机0 翻译文件（*.xls）|*.xls", string.Empty);
            if (string.IsNullOrEmpty(this.baseFile))
            {
                return;
            }

            // 设定保存的文件名
            this.ImportText(this.baseFile);
            //this.CheckImportTextCharCount(this.strFileOpen);
        }

        /// <summary>
        /// 切换导入、导出的类型
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void rdoFont_CheckedChanged(object sender, EventArgs e)
        {
            RadioButton rdo = (RadioButton)sender;
            if (rdo.Checked)
            {
                this.exportName = rdo.Text;
            }
        }

        /// <summary>
        /// Copy文件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnPatch_Click(object sender, EventArgs e)
        {
            try
            {
                string source = this.baseFolder;
                string target = this.baseFolder + @"\生化危机0文件\Biohazard_0\";
                string fontBin = Path.GetFullPath(@"..\BioTools\Bio0Edit\");
                if (this.rdoFont1.Checked)
                {
                    this.CopyText01(source, target, fontBin);
                }
                else if (this.rdoFont2.Checked)
                {
                    this.CopyText02(source, target, fontBin);
                }
                else if (this.rdoFont3.Checked)
                {
                    this.CopyText03(source, target, fontBin);
                }
                else if (this.rdoFont4.Checked)
                {
                    this.CopyText04(source, target, fontBin);
                }
                else if (this.rdoImg.Checked)
                {
                    this.CopyTexture(source, target);
                }
                else if (this.rdoAll.Checked)
                {
                    this.CopyText04(source, target, fontBin);
                    this.CopyText03(source, target, fontBin);
                    this.CopyText02(source, target, fontBin);
                    this.CopyText01(source, target, fontBin);
                    this.CopyTexture(source, target);
                }

                MessageBox.Show("Copy完成");
            }
            catch (Exception me)
            {
                MessageBox.Show(me.Message + "\n" + me.StackTrace);
            }
            finally
            {
                // 隐藏进度条
                this.CloseProcessBar();
            }
        }

        #endregion

        #region " 私有方法 "

        /// <summary>
        /// 复制文件
        /// </summary>
        /// <param name="sourceFile"></param>
        /// <param name="targetFile"></param>
        private void FileCopy(string sourceFile, string targetFile, bool overwrite)
        {
            if (!File.Exists(targetFile))
            {
                string shortName = Util.GetShortName(targetFile);
                System.IO.Directory.CreateDirectory(targetFile.Replace(shortName, string.Empty));
            }

            File.Copy(sourceFile, targetFile, overwrite);
        }

        /// <summary>
        /// 复制图片
        /// </summary>
        /// <param name="source"></param>
        /// <param name="target"></param>
        private void CopyTexture(string source, string target)
        {
            if (this.isWii)
            {
                this.FileCopy(source + this.filesFolder + @"\bio0\texture\C_BUTTON.tpl", target + this.filesFolder + @"\bio0\texture\C_BUTTON.tpl", true);
                this.FileCopy(source + this.filesFolder + @"\bio0\texture\keyconfig.tpl", target + this.filesFolder + @"\bio0\texture\keyconfig.tpl", true);
                this.FileCopy(source + this.filesFolder + @"\bio0\texture\MapAdd.tpl", target + this.filesFolder + @"\bio0\texture\MapAdd.tpl", true);
                this.FileCopy(source + this.filesFolder + @"\bio0\texture\Strap.tpl", target + this.filesFolder + @"\bio0\texture\Strap.tpl", true);
            }

            this.FileCopy(source + this.filesFolder + @"\bio0\texture\f_select.tpl", target + this.filesFolder + @"\bio0\texture\f_select.tpl", true);
            this.FileCopy(source + this.filesFolder + @"\bio0\texture\first.tpl", target + this.filesFolder + @"\bio0\texture\first.tpl", true);
            this.FileCopy(source + this.filesFolder + @"\bio0\texture\map.tpl", target + this.filesFolder + @"\bio0\texture\map.tpl", true);
            this.FileCopy(source + this.filesFolder + @"\bio0\texture\opt00.tpl", target + this.filesFolder + @"\bio0\texture\opt00.tpl", true);
        }

        /// <summary>
        /// Copy 文本01信息
        /// </summary>
        /// <param name="source"></param>
        /// <param name="target"></param>
        /// <param name="fontBin"></param>
        private void CopyText01(string source, string target, string fontBin)
        {
            // 生成Message文件
            this.CreateMessge(source + this.filesFolder + @"\bio0\message\");

            // Copy Message文件
            this.FileCopy(source + this.filesFolder + @"\bio0\message\NewMessage.arc", target + this.filesFolder + @"\bio0\message\message.arc", true);

            // 压缩文本
            List<FilePosInfo> fileNameInfo = Util.GetAllFiles(source + this.filesFolder + @"\bio0\scene\").Where(
                p => !p.IsFolder && p.File.EndsWith(this.comp.GetDecomFileSuffix())).ToList();

            // 显示进度条
            this.ResetProcessBar(fileNameInfo.Count);

            foreach (FilePosInfo file in fileNameInfo)
            {
                // 读入文件内容
                byte[] byComressData = comp.Compress(file.File, File.ReadAllBytes(file.File.Replace(this.comp.GetDecomFileSuffix(), string.Empty)).Length);

                File.WriteAllBytes(file.File.Replace(this.comp.GetDecomFileSuffix(), string.Empty), byComressData);

                // 更新进度条
                this.ProcessBarStep();
            }

            // 隐藏进度条
            this.CloseProcessBar();

            // Copy文本
            fileNameInfo = Util.GetAllFiles(source + this.filesFolder + @"\bio0\scene\").Where(
                p => !p.IsFolder && p.File.EndsWith(this.comp.GetCompFileSuffix())).ToList();
            foreach (FilePosInfo fileInfo in fileNameInfo)
            {
                string shortName = Util.GetShortName(fileInfo.File);
                this.FileCopy(fileInfo.File, target + this.filesFolder + @"\bio0\scene\" + shortName, true);
            }

            // Copy字库
            fontBin += @"cfont01.bin";
            this.FileCopy(fontBin, target + this.filesFolder + @"\bio0\texture\" + Util.GetShortName(fontBin).Replace("cfont", "jfont"), true);
            this.FileCopy(source + this.filesFolder + @"\bio0\texture\jfont01.tpl", target + this.filesFolder + @"\bio0\texture\jfont01.tpl", true);
        }

        /// <summary>
        /// Copy 文本02信息
        /// </summary>
        /// <param name="source"></param>
        /// <param name="target"></param>
        /// <param name="fontBin"></param>
        private void CopyText02(string source, string target, string fontBin)
        {
            // 生成Message文件
            this.CreateMessge(source + this.filesFolder + @"\bio0\message\");

            // Copy Message文件
            this.FileCopy(source + this.filesFolder + @"\bio0\message\message.arc", target + this.filesFolder + @"\bio0\message\message.arc", true);

            // Copy Main.dol
            if (this.isWii)
            {
                this.FileCopy(source + @"\sys\main.dol", target + @"\sys\main.dol", true);
            }
            else
            {
                this.FileCopy(source + @"\$$systemdata\Start.dol", target + @"\\&&systemdata\Start.dol", true);
            }

            // Copy字库
            fontBin += @"cfont02.bin";
            this.FileCopy(fontBin, target + this.filesFolder + @"\bio0\texture\" + Util.GetShortName(fontBin).Replace("cfont", "jfont"), true);
            this.FileCopy(source + this.filesFolder + @"\bio0\texture\jfont02.tpl", target + this.filesFolder + @"\bio0\texture\jfont02.tpl", true);
        }

        /// <summary>
        /// Copy 文本03信息
        /// </summary>
        /// <param name="source"></param>
        /// <param name="target"></param>
        /// <param name="fontBin"></param>
        private void CopyText03(string source, string target, string fontBin)
        {
            // 压缩文本
            List<FilePosInfo> fileNameInfo = Util.GetAllFiles(source + this.filesFolder + @"\bio0\demo\").Where(
                p => !p.IsFolder && p.File.EndsWith(this.comp.GetDecomFileSuffix())).ToList();

            // 显示进度条
            this.ResetProcessBar(fileNameInfo.Count);

            foreach (FilePosInfo file in fileNameInfo)
            {
                // 读入文件内容
                byte[] byComressData = comp.Compress(file.File, File.ReadAllBytes(file.File.Replace(this.comp.GetDecomFileSuffix(), string.Empty)).Length);

                File.WriteAllBytes(file.File.Replace(this.comp.GetDecomFileSuffix(), string.Empty), byComressData);

                // 更新进度条
                this.ProcessBarStep();
            }

            // 隐藏进度条
            this.CloseProcessBar();

            // Copy文本
            fileNameInfo = Util.GetAllFiles(source + this.filesFolder + @"\bio0\demo\").Where(
                p => !p.IsFolder && p.File.EndsWith(this.comp.GetCompFileSuffix())).ToList();
            foreach (FilePosInfo fileInfo in fileNameInfo)
            {
                string shortName = Util.GetShortName(fileInfo.File);
                this.FileCopy(fileInfo.File, target + this.filesFolder + @"\bio0\demo\" + shortName, true);
            }

            // Copy字库
            fontBin += @"cfont03.bin";
            this.CopyJfont03(fontBin, source, this.filesFolder + @"\bio0\texture\jfont03.tpl", this.filesFolder + @"\bio0\model\demore00.arc" + this.comp.GetDecomFileSuffix(), target, 0x14b5a0, 0x10a920);
            this.CopyJfont03(fontBin, source, this.filesFolder + @"\bio0\texture\jfont03.tpl", this.filesFolder + @"\bio0\model\demore01.arc" + this.comp.GetDecomFileSuffix(), target, 0x14f9e0, 0x10ed60);
            this.CopyJfont03(fontBin, source, this.filesFolder + @"\bio0\texture\jfont03.tpl", this.filesFolder + @"\bio0\model\demore02.arc" + this.comp.GetDecomFileSuffix(), target, 0x150f00, 0x110280);
        }

        /// <summary>
        /// Copy Jfont03字库信息
        /// </summary>
        /// <param name="fontBin"></param>
        /// <param name="fontTpl"></param>
        /// <param name="fontTarget"></param>
        private void CopyJfont03(string fontBin, string source, string tplFile, string objFile, string target, long binAddr, long tplAddr)
        {
            string fontTpl = source + tplFile;
            string fontTarget = source + objFile;

            this.CopyJfont03(fontBin, fontTarget, binAddr, 0x53ec);
            this.CopyJfont03(fontTpl, fontTarget, tplAddr, 0x40c80);

            // 压缩fontTarget
            File.WriteAllBytes(fontTarget.Replace(this.comp.GetDecomFileSuffix(), string.Empty), comp.Compress(fontTarget, File.ReadAllBytes(fontTarget.Replace(this.comp.GetDecomFileSuffix(), string.Empty)).Length));

            // Copy压缩过的Target
            this.FileCopy(fontTarget.Replace(this.comp.GetDecomFileSuffix(), string.Empty), target + objFile.Replace(this.comp.GetDecomFileSuffix(), string.Empty), true);
        }

        /// <summary>
        /// Copy Jfont03字库信息
        /// </summary>
        /// <param name="fontFile"></param>
        /// <param name="fontTarget"></param>
        /// <param name="addr"></param>
        /// <param name="size"></param>
        private void CopyJfont03(string fontFile, string fontTarget, long addr, long size)
        {
            try
            {
                byte[] byFont = File.ReadAllBytes(fontFile);
                byte[] byFontTarget = File.ReadAllBytes(fontTarget);

                Array.Copy(byFont, 0, byFontTarget, addr, byFont.Length);

                File.WriteAllBytes(fontTarget, byFontTarget);
            }
            catch (Exception me)
            {
                MessageBox.Show(me.Message + "\n" + me.StackTrace);
            }
        }

        /// <summary>
        /// Copy 文本04信息
        /// </summary>
        /// <param name="source"></param>
        /// <param name="target"></param>
        /// <param name="fontBin"></param>
        private void CopyText04(string source, string target, string fontBin)
        {
            // Copy文本
            List<FilePosInfo> fileNameInfo = Util.GetAllFiles(source + this.filesFolder + @"\bio0\movie\").Where(p => !p.IsFolder && p.File.EndsWith(".bin")).ToList();
            foreach (FilePosInfo fileInfo in fileNameInfo)
            {
                string shortName = Util.GetShortName(fileInfo.File).Replace(".bin", ".bin");
                if (this.isWii)
                {
                    this.FileCopy(fileInfo.File, target + @"files\thp\" + shortName, true);
                }
                else
                {
                    this.FileCopy(fileInfo.File, target + @"\bio0\movie\" + shortName, true);
                }
            }

            // Copy字库
            fontBin += @"cfont04.bin";
            this.FileCopy(fontBin, target + this.filesFolder + @"\bio0\texture\" + Util.GetShortName(fontBin).Replace("cfont", "jfont"), true);
            this.FileCopy(source + this.filesFolder + @"\bio0\texture\jfont04.tpl", target + this.filesFolder + @"\bio0\texture\jfont04.tpl", true);
        }

        /// <summary>
        /// 保存文本
        /// </summary>
        /// <returns></returns>
        private bool Save()
        {
            // 长度及关键字检查
            if (!this.CheckCnText())
            {
                return false;
            }

            // 将中文文本转换成二进制数据
            List<byte> cnBytes = new List<byte>();
            if (!this.EncodeCnText(cnBytes, this.txtJp.Text, this.txtCn.Text, this.hasEntry))
            {
                return false;
            }

            // 检查最大的字节数
            int maxByteCount = cnBytes.Count;
            if (this.hasEntry)
            {
                maxByteCount += (this.textEntrys.Count + 1) * 4;
            }
            if (this.oldTextLen < maxByteCount)
            {
                throw new Exception("最大字节数超出 ：" + (maxByteCount - this.oldTextLen));
            }

            // 修正最大长度不足的字节
            if (this.oldTextLen != cnBytes.Count)
            {
                int diffLen = this.oldTextLen - cnBytes.Count;
                if (this.hasEntry)
                {
                    diffLen -= (this.textEntrys.Count + 1) * 4;
                }
                while (diffLen > 0)
                {
                    cnBytes.Add(0);
                    diffLen--;
                }
            }

            // 保存二进制数据
            this.Save(cnBytes, this.hasEntry);

            return true;
        }

        /// <summary>
        /// 初始化文本开始位置
        /// </summary>
        private void InitStartPos(string folder)
        {
            this.fileList.Items.Clear();
            this.textFiles.Clear();

            // 查找Scene文本
            string[] addrInfos = File.ReadAllLines(this.baseFolder + @"\SceneAddr.txt", Encoding.UTF8);
            for (int i = 0; i < addrInfos.Length; i += 2)
            {
                FilePosInfo posInfo = new FilePosInfo(folder + this.filesFolder + @"\bio0\scene\" + addrInfos[i]);
                string[] addrs = addrInfos[i + 1].Split(' ');
                posInfo.TextType = Bio0TextType.Scene;
                posInfo.TextStart = Convert.ToInt32(addrs[0], 16);
                posInfo.MaxLen = Convert.ToInt32(addrs[1], 16);

                this.textFiles.Add(posInfo);
                this.fileList.Items.Add(addrInfos[i]);
            }

            // 添加Event文本
            addrInfos = File.ReadAllLines(this.baseFolder + @"\EventAddr.txt", Encoding.UTF8);
            for (int i = 0; i < addrInfos.Length; i += 2)
            {
                FilePosInfo posInfo = new FilePosInfo(folder + this.filesFolder + @"\bio0\demo\" + addrInfos[i]);
                string[] addrs = addrInfos[i + 1].Split(' ');
                posInfo.TextType = Bio0TextType.Event;
                posInfo.TextStart = Convert.ToInt32(addrs[0], 16);
                posInfo.MaxLen = Convert.ToInt32(addrs[1], 16);

                this.textFiles.Add(posInfo);
                this.fileList.Items.Add(addrInfos[i]);
            }

            // 添加Message中的文本
            List<FilePosInfo> fileNameInfo = Util.GetAllFiles(folder + this.filesFolder + @"\bio0\message\Decompress\").Where(p => p.File.IndexOf("savepoinbma") == -1 && !p.IsFolder && !p.File.EndsWith("_cn")).ToList();
            foreach (FilePosInfo fileInfo in fileNameInfo)
            {
                FilePosInfo posInfo = new FilePosInfo(fileInfo.File);
                posInfo.TextType = Bio0TextType.Message;
                posInfo.TextStart = 0;

                this.textFiles.Add(posInfo);
                this.fileList.Items.Add(Util.GetShortName(fileInfo.File));
            }

            // 添加Move的文本
            fileNameInfo = Util.GetAllFiles(folder + this.filesFolder + @"\bio0\movie_cn\").Where(p => !p.IsFolder && !p.File.EndsWith("_cn")).ToList();
            foreach (FilePosInfo fileInfo in fileNameInfo)
            {
                FilePosInfo posInfo = new FilePosInfo(fileInfo.File);
                posInfo.TextType = Bio0TextType.Movie;
                posInfo.TextStart = 0x60;

                this.textFiles.Add(posInfo);
                this.fileList.Items.Add(Util.GetShortName(fileInfo.File));
            }

            // 添加Main.do中的文本
            string mainTextFile = folder + @"\sys\main.dol";
            FilePosInfo mainPosInfo = null;
            if (this.isWii)
            {
                mainPosInfo = new FilePosInfo(mainTextFile);
                mainPosInfo.TextType = Bio0TextType.Main;
                mainPosInfo.TextStart = 0x2dd638;
                mainPosInfo.TextEnd = 0x2dd666;
                mainPosInfo.SubIndex = string.Empty;
                this.textFiles.Add(mainPosInfo);
                this.fileList.Items.Add(Util.GetShortName(mainTextFile) + " 0x" + mainPosInfo.TextStart.ToString("x") + "--0x" + mainPosInfo.TextEnd.ToString("x"));

                mainPosInfo = new FilePosInfo(mainTextFile);
                mainPosInfo.TextType = Bio0TextType.Main;
                mainPosInfo.TextStart = 0x2dd7f0;
                mainPosInfo.TextEnd = 0x2df5c2;
                mainPosInfo.SubIndex = "_01";
                this.textFiles.Add(mainPosInfo);
                this.fileList.Items.Add(Util.GetShortName(mainTextFile) + " 0x" + mainPosInfo.TextStart.ToString("x") + "--0x" + mainPosInfo.TextEnd.ToString("x"));

                mainPosInfo = new FilePosInfo(mainTextFile);
                mainPosInfo.TextType = Bio0TextType.Main;
                mainPosInfo.TextStart = 0x310060;
                mainPosInfo.SubIndex = "_02";
                this.textFiles.Add(mainPosInfo);
                this.fileList.Items.Add(Util.GetShortName(mainTextFile) + " 0x" + mainPosInfo.TextStart.ToString("x"));

                mainPosInfo = new FilePosInfo(mainTextFile);
                mainPosInfo.TextType = Bio0TextType.Main;
                mainPosInfo.TextStart = 0x2afb40;
                mainPosInfo.TextEnd = 0x2afb78;
                mainPosInfo.SubIndex = "_03";
                this.textFiles.Add(mainPosInfo);
                this.fileList.Items.Add(Util.GetShortName(mainTextFile) + " 0x" + mainPosInfo.TextStart.ToString("x") + "--0x" + mainPosInfo.TextEnd.ToString("x"));
            }
            else
            {
                mainPosInfo = new FilePosInfo(mainTextFile);
                mainPosInfo.TextType = Bio0TextType.Main;
                mainPosInfo.TextStart = 0x27c7c0;
                mainPosInfo.SubIndex = "_03";
                this.textFiles.Add(mainPosInfo);
                this.fileList.Items.Add(Util.GetShortName(mainTextFile) + " 0x" + mainPosInfo.TextStart.ToString("x"));
            }
        }

        /// <summary>
        /// 查找场景文本的开始位置
        /// </summary>
        /// <param name="senceFile"></param>
        /// <returns></returns>
        private int SearchSceneTextStart(string senceFile)
        { 
            FileStream fs = null;
            try
            {
                // 将文件中的数据，循环读取到byData中
                fs = new FileStream(senceFile, FileMode.Open);
                byte[] byData = new byte[fs.Length];
                fs.Read(byData, 0, byData.Length);
                fs.Close();
                fs = null;

                // 查找关键字01 07 02
                ////int maxLen = byData.Length - 10;
                ////for (int i = 0; i < maxLen; i++)
                ////{
                ////    if (byData[i] == 1 && byData[i + 1] == 7 && byData[i + 2] == 2)
                ////    {
                ////        for (int j = i - 8; j >= 0; j--)
                ////        {
                ////            if (byData[j] == 0 && byData[j + 1] == 0 && byData[j + 2] == 0 && byData[j + 3] == 0 && byData[j + 4] == 0 && byData[j + 5] == 0 && byData[j + 6] == 0)
                ////            {
                ////                return j + 4;
                ////            }
                ////        }
                ////    }
                ////}
                int startPos = Util.GetOffset(byData, 0x40, 0x43);
                int len = Util.GetOffset(byData, 0x44, 0x47);
                if (len > 0)
                {
                    return startPos;
                }

                return -1;
            }
            catch (Exception me)
            {
                MessageBox.Show(me.Message + "\n" + me.StackTrace);
                return -1;
            }
            finally
            {
                if (fs != null)
                {
                    fs.Close();
                }
            }
        }

        /// <summary>
        /// 变更文件
        /// </summary>
        /// <param name="file"></param>
        private string ChangeFile(string file, int startPos, int endPos, Dictionary<int, Bio0CharInfo[]> fontCharPage)
        {
            FileStream fs = null;
            try
            {
                // 将文件中的数据，循环读取到byData中
                fs = new FileStream(file, FileMode.Open);
                byte[] byData = new byte[fs.Length];
                fs.Read(byData, 0, byData.Length);
                fs.Close();
                fs = null;

                // 开始解码
                return this.DecodeText(byData, startPos, endPos, fontCharPage);
            }
            catch (Exception me)
            {
                MessageBox.Show(me.Message + "\n" + me.StackTrace);
                return string.Empty;
            }
            finally
            {
                if (fs != null)
                {
                    fs.Close();
                }
            }
        }

        /// <summary>
        /// 开始解码
        /// </summary>
        /// <param name="byData"></param>
        /// <param name="startPos"></param>
        private string DecodeText(byte[] byData, int startPos, int endPos, Dictionary<int, Bio0CharInfo[]> fontCharPage)
        {
            StringBuilder sb = new StringBuilder();
            int textCount = (endPos > 0 ? 1 : Util.GetOffset(byData, startPos, startPos + 3));


            for (int j = 0; j < textCount; j++)
            {
                int pos = startPos + (endPos > 0 ? 0 : Util.GetOffset(byData, startPos + (j + 1) * 4, startPos + (j + 1) * 4 + 3));
                while (endPos > 0 ? (pos < endPos) : (byData[pos] != 0))
                {
                    if (byData[pos] >= 0 && byData[pos] <= 8)
                    {
                        sb.Append("^" + byData[pos] + "^");
                        if (byData[pos] == 0 || byData[pos] == 1)
                        {
                            sb.Append("\n");
                        }
                        pos += 1;
                    }
                    else if (byData[pos] < 0x60)
                    {
                        sb.Append(fontCharPage[0][byData[pos]].FontChar);
                        pos += 1;
                    }
                    else
                    {
                        if (fontCharPage.ContainsKey(byData[pos]))
                        {
                            if (string.IsNullOrEmpty(fontCharPage[byData[pos]][byData[pos + 1]].FontChar))
                            {
                                sb.Append("^" + byData[pos].ToString("x") + " " + byData[pos + 1].ToString("x") + "^");
                            }
                            else
                            {
                                sb.Append(fontCharPage[byData[pos]][byData[pos + 1]].FontChar);
                            }
                            pos += 2;
                        }
                        else
                        {
                            sb.Append("^" + byData[pos].ToString("x") + "^");
                            pos += 1;
                        }
                    }
                }

                if (textCount > 1 && byData[pos] == 0)
                {
                    sb.Append("^0^<BR>\n");
                }
            }

            return sb.ToString();
        }

        /// <summary>
        /// 读取字库信息
        /// </summary>
        private void ReadFontChar()
        {
            // 读取日文字库01
            this.ReadFontFile(@"..\BioTools\Bio0Edit\jfont01.bin", this.jpFont01CharPage, this.jfont01, true);

            // 读取日文字库02
            this.ReadFontFile(@"..\BioTools\Bio0Edit\jfont02.bin", this.jpFont02CharPage, this.jfont02, true);

            // 读取日文字库03
            this.ReadFontFile(@"..\BioTools\Bio0Edit\jfont03.bin", this.jpFont03CharPage, this.jfont03, true);

            // 读取日文字库04
            this.ReadFontFile(@"..\BioTools\Bio0Edit\jfont04.bin", this.jpFont04CharPage, this.jfont04, true);

            // 读取中文字库01
            this.ReadFontFile(@"..\BioTools\Bio0Edit\cfont01.bin", this.cnFont01CharPage, cnFont01);

            // 读取中文字库02
            this.ReadFontFile(@"..\BioTools\Bio0Edit\cfont02.bin", this.cnFont02CharPage, cnFont02);

            // 读取中文字库03
            this.ReadFontFile(@"..\BioTools\Bio0Edit\cfont03.bin", this.cnFont03CharPage, cnFont03);

            // 读取中文字库04
            this.ReadFontFile(@"..\BioTools\Bio0Edit\cfont04.bin", this.cnFont04CharPage, cnFont04);

            // 初始化Message中的文本对应的字库
            this.jpMessageTextFont.Clear();
            this.jpMessageTextFont.Add("blend", this.jpFont01CharPage);
            this.jpMessageTextFont.Add("commonms", this.jpFont01CharPage);
            this.jpMessageTextFont.Add("file_tex", this.jpFont02CharPage);
            this.jpMessageTextFont.Add("item_name", this.jpFont02CharPage);
            this.jpMessageTextFont.Add("item_tex", this.jpFont02CharPage);
            this.jpMessageTextFont.Add("omake", this.jpFont02CharPage);
            this.jpMessageTextFont.Add("option", this.jpFont02CharPage);
            this.jpMessageTextFont.Add("saveload", this.jpFont01CharPage);
            this.jpMessageTextFont.Add("savepoint", this.jpFont01CharPage);
            this.jpMessageTextFont.Add("status_m", this.jpFont02CharPage);

            this.cnMessageTextFont.Clear();
            this.cnMessageTextFont.Add("blend", this.cnFont01CharPage);
            this.cnMessageTextFont.Add("commonms", this.cnFont01CharPage);
            this.cnMessageTextFont.Add("file_tex", this.cnFont02CharPage);
            this.cnMessageTextFont.Add("item_name", this.cnFont02CharPage);
            this.cnMessageTextFont.Add("item_tex", this.cnFont02CharPage);
            this.cnMessageTextFont.Add("omake", this.cnFont02CharPage);
            this.cnMessageTextFont.Add("option", this.cnFont02CharPage);
            this.cnMessageTextFont.Add("saveload", this.cnFont01CharPage);
            this.cnMessageTextFont.Add("savepoint", this.cnFont01CharPage);
            this.cnMessageTextFont.Add("status_m", this.cnFont02CharPage);
        }

        /// <summary>
        /// 读取字库信息
        /// </summary>
        private void ReadFontFile(string fontInfoFile, Dictionary<int, Bio0CharInfo[]> fontCharPage, string cnFont)
        {
            string[] fontChars = File.ReadAllLines(cnFont);
            this.ReadFontFile(fontInfoFile, fontCharPage, fontChars, false);
        }

        /// <summary>
        /// 读取字库信息
        /// </summary>
        private void ReadFontFile(string fontInfoFile, Dictionary<int, Bio0CharInfo[]> fontCharPage, string[] font2, bool isJpfont)
        {
            FileStream fs = null;
            fontCharPage.Clear();

            try
            {
                // 将文件中的数据，读取到byData中
                fs = new FileStream(fontInfoFile, FileMode.Open);
                byte[] byData = new byte[fs.Length];
                fs.Read(byData, 0, byData.Length);
                fs.Close();
                fs = null;

                // 判断是否正确
                if (byData[0x03] != 0x2C || byData[0x07] != 0x0C || byData[0x09] != 0x60)
                {
                    throw new Exception("不是正确生化危机0字库设置文件！");
                }

                // 取得当前字库信息
                int[] picPos = new int[] { 0x2C, 0x03EC, 0x0DEC, 0x17EC, 0x21EC, 0x2BEC, 0x35EC, 0x3FEC, 0x49EC };
                //List<KeyValuePair<int, int>> charPosList = new List<KeyValuePair<int, int>>();
                List<KeyValuePair<string, string>> charPosList = new List<KeyValuePair<string, string>>();
                int charIndex = 0;

                for (int i = 0; i < picPos.Length; i++)
                {
                    // 取得当前页的字库信息
                    byte[] fontPage;
                    if (i == 0)
                    {
                        fontPage = new byte[0x60 * 10];
                        fontCharPage.Add(0, new Bio0CharInfo[this.jCharPage.Length]);
                    }
                    else
                    {
                        fontPage = new byte[256 * 10];
                        fontCharPage.Add(0x60 + (i - 1), new Bio0CharInfo[256]);
                    }
                    Array.Copy(byData, picPos[i], fontPage, 0, fontPage.Length);

                    charIndex = 0;
                    for (int j = 0; j < fontPage.Length; )
                    {
                        // 每10个字节标识一个字符信息
                        byte[] temp = new byte[10];
                        Array.Copy(fontPage, j, temp, 0, temp.Length);

                        // 设置当前字符信息
                        Bio0CharInfo charInfo = new Bio0CharInfo();
                        charInfo.CharPage = i == 0 ? 0 : 0x60 + (i - 1);
                        charInfo.ByCharInfo = temp;
                        charInfo.X = Util.GetOffset(temp, 2, 3);
                        charInfo.Y = Util.GetOffset(temp, 4, 5);
                        charInfo.Width = Util.GetOffset(temp, 6, 7);
                        charInfo.Height = Util.GetOffset(temp, 8, 9);

                        charInfo.IsUseSecondImg = Util.GetOffset(temp, 0, 1) > 0;
                        int charPos = charInfo.Y / 0x1C * 32 + charInfo.X / 0x1C;

                        // 追加当前的字库信息
                        if (charInfo.IsUseSecondImg)
                        {
                            //charPosList.Add(new KeyValuePair<int, int>(charInfo.Y / 0x1C, charInfo.X / 0x1C));
                            charPosList.Add(new KeyValuePair<string, string>(charInfo.CharPage.ToString("x"), charIndex.ToString("x")));
                            if (charPos < font2.Length)
                            {
                                charInfo.FontChar = font2[charPos];
                            }
                        }
                        //else
                        //{
                        //    if (charPos < fontCom.Length)
                        //    {
                        //        charInfo.FontChar = fontCom[charPos];
                        //    }
                        //}

                        fontCharPage[charInfo.CharPage][charIndex] = charInfo;

                        j += 10;
                        charIndex++;
                    }
                }

                // 设置字库信息
                this.SetCommonFontChar(fontCharPage, isJpfont);
            }
            catch (Exception me)
            {
                MessageBox.Show(me.Message + "\n" + me.StackTrace);
                return;
            }
            finally
            {
                if (fs != null)
                {
                    fs.Close();
                }
            }
        }

        /// <summary>
        /// 设置共通字库信息
        /// </summary>
        private void SetCommonFontChar(Dictionary<int, Bio0CharInfo[]> fontCharPage, bool isJpfont)
        {
            string[] charPage = isJpfont ? this.jCharPage : this.cCharPage;
            string[] charPage60 = isJpfont ? this.jCharPage60 : this.cCharPage60;
            string[] charPage61 = isJpfont ? this.jCharPage61 : this.cCharPage61;

            // 追加共通的字库信息
            for (int i = 0; i < charPage.Length; i++)
            {
                fontCharPage[0][i].FontChar = charPage[i];
            }

            for (int i = 0; i < charPage60.Length; i++)
            {
                if (string.IsNullOrEmpty(fontCharPage[0x60][i].FontChar))
                {
                    fontCharPage[0x60][i].FontChar = charPage60[i];
                }
            }

            for (int i = 0; i < 0x50; i++)
            {
                fontCharPage[0x61][i].FontChar = charPage61[i];
            }

            // 追加空的文字
            foreach (int fontPage in fontCharPage.Keys)
            {
                if (fontPage < 0x62)
                {
                    continue;
                }

                Bio0CharInfo[] pageFonts = fontCharPage[fontPage];
                for (int i = 0; i < pageFonts.Length; i++)
                {
                    if (pageFonts[i].FontChar == null && pageFonts[i].IsUseSecondImg)
                    {
                        pageFonts[i].FontChar = "*";
                    }
                }
            }
        }

        /// <summary>
        /// 初始化中文字库
        /// </summary>
        private void InitCnFont()
        {
            if (this.rdoFont1.Checked)
            {
                File.Copy(@"..\BioTools\Bio0Edit\jfont01.bin", @"..\BioTools\Bio0Edit\cfont01.bin", true);
                this.CreateEmptyCnFontChar(@"..\BioTools\Bio0Edit\cfont01.bin", cnFont01);
            }
            else if (this.rdoFont2.Checked)
            {
                File.Copy(@"..\BioTools\Bio0Edit\jfont01.bin", @"..\BioTools\Bio0Edit\cfont02.bin", true);
                this.CreateEmptyCnFontChar(@"..\BioTools\Bio0Edit\cfont02.bin", cnFont02);
            }
            else if (this.rdoFont3.Checked)
            {
                File.Copy(@"..\BioTools\Bio0Edit\jfont01.bin", @"..\BioTools\Bio0Edit\cfont03.bin", true);
                this.CreateEmptyCnFontChar(@"..\BioTools\Bio0Edit\cfont03.bin", cnFont03);
            }
            else if (this.rdoFont4.Checked)
            {
                File.Copy(@"..\BioTools\Bio0Edit\jfont01.bin", @"..\BioTools\Bio0Edit\cfont04.bin", true);
                this.CreateEmptyCnFontChar(@"..\BioTools\Bio0Edit\cfont04.bin", cnFont04);
            }
            else if (this.rdoAll.Checked)
            {
                File.Copy(@"..\BioTools\Bio0Edit\jfont01.bin", @"..\BioTools\Bio0Edit\cfont01.bin", true);
                File.Copy(@"..\BioTools\Bio0Edit\jfont01.bin", @"..\BioTools\Bio0Edit\cfont02.bin", true);
                File.Copy(@"..\BioTools\Bio0Edit\jfont01.bin", @"..\BioTools\Bio0Edit\cfont03.bin", true);
                File.Copy(@"..\BioTools\Bio0Edit\jfont01.bin", @"..\BioTools\Bio0Edit\cfont04.bin", true);

                this.CreateEmptyCnFontChar(@"..\BioTools\Bio0Edit\cfont01.bin", cnFont01);
                this.CreateEmptyCnFontChar(@"..\BioTools\Bio0Edit\cfont02.bin", cnFont02);
                this.CreateEmptyCnFontChar(@"..\BioTools\Bio0Edit\cfont03.bin", cnFont03);
                this.CreateEmptyCnFontChar(@"..\BioTools\Bio0Edit\cfont04.bin", cnFont04);
            }
        }

        /// <summary>
        /// 生成空的中文字库
        /// </summary>
        /// <param name="jpFontChar"></param>
        /// <param name="startIndex"></param>
        /// <param name="cnFontText"></param>
        private void CreateEmptyCnFontChar(string fontFile, string cnFontText)
        {
            // 重新设置字符映射
            this.ResetCharMap(fontFile);

            // 写空的字符
            string[] cnFont = new string[672];
            for (int i = 0; i < cnFont.Length; i++)
            {
                cnFont[i] = "*";
            }

            File.WriteAllLines(cnFontText, cnFont, Encoding.UTF8);
        }

        /// <summary>
        /// 重新设置字符映射
        /// </summary>
        /// <param name="fontFile"></param>
        private void ResetCharMap(string fontInfoFile)
        {
            FileStream fs = null;

            try
            {
                // 将文件中的数据，读取到byData中
                fs = new FileStream(fontInfoFile, FileMode.Open);
                byte[] byData = new byte[fs.Length];
                fs.Read(byData, 0, byData.Length);
                fs.Close();
                fs = null;

                // 判断是否正确
                if (byData[0x03] != 0x2C || byData[0x07] != 0x0C || byData[0x09] != 0x60)
                {
                    throw new Exception("不是正确生化危机0字库设置文件！");
                }

                // 组合最新中文共通字库
                string[] newComCnFont = new string[this.cCharPage.Length + this.cCharPage60.Length + this.cCharPage61.Length - 8 - 0x50];
                Array.Copy(this.cCharPage, 8, newComCnFont, 0, this.cCharPage.Length - 8);
                Array.Copy(this.cCharPage60, 0, newComCnFont, this.cCharPage.Length - 8, 0x58);
                Array.Copy(this.cCharPage60, 0xa8, newComCnFont, this.cCharPage.Length - 8 + 0x58, this.cCharPage60.Length - 0xa8);
                Array.Copy(this.cCharPage61, 0, newComCnFont, this.cCharPage.Length + this.cCharPage60.Length - 8 - 0x50, this.cCharPage61.Length);

                // 取得当前字库信息
                int[] picPos = new int[] { 0x2C, 0x03EC, 0x0DEC, 0x17EC, 0x21EC, 0x2BEC, 0x35EC, 0x3FEC, 0x49EC };
                int imgComCharIndex = 0;
                int img2CharIndex = 0;
                List<KeyValuePair<string, string>> charPosList = new List<KeyValuePair<string, string>>();

                for (int i = 0; i < picPos.Length; i++)
                {
                    // 取得当前页的字库信息
                    byte[] fontPage;
                    if (i == 0)
                    {
                        fontPage = new byte[0x60 * 10];
                    }
                    else
                    {
                        fontPage = new byte[256 * 10];
                    }
                    Array.Copy(byData, picPos[i], fontPage, 0, fontPage.Length);

                    int pageCharIndex = 0;
                    for (int j = 0; j < fontPage.Length; )
                    {
                        // 每10个字节标识一个字符信息
                        byte[] temp = new byte[10];
                        Array.Copy(fontPage, j, temp, 0, temp.Length);

                        // 追加当前的字库信息
                        if (Util.GetOffset(temp, 0, 1) > 0)
                        {
                            // 设置第二副图片字符信息
                            int y = img2CharIndex / 32 * 0x1C;
                            int x = img2CharIndex % 32 * 0x1C;

                            temp[2] = (byte)((x >> 8) & 0xFF);
                            temp[3] = (byte)(x & 0xFF);
                            temp[4] = (byte)((y >> 8) & 0xFF);
                            temp[5] = (byte)(y & 0xFF);
                            temp[6] = 0;
                            temp[7] = 0x1C;
                            temp[8] = 0;
                            temp[9] = 0x1C;

                            Array.Copy(temp, 0, fontPage, j, temp.Length);
                            img2CharIndex++;
                        }
                        else if (imgComCharIndex < 8)
                        {
                            imgComCharIndex++;
                        }
                        else 
                        {
                            int posIndex = imgComCharIndex - 8;
                            if (posIndex < newComCnFont.Length)
                            {
                                // 设置共通图片字符信息
                                if (!string.IsNullOrEmpty(newComCnFont[posIndex])
                                    && !this.comOldFont.Contains(newComCnFont[posIndex]))
                                {
                                    int y = posIndex / 16 * 0x1C;
                                    int x = posIndex % 16 * 0x1C;

                                    if (posIndex >= 11 * 16)
                                    {
                                        y -= 11 * 0x1C;
                                        x += 16 * 0x1C;
                                    }

                                    temp[2] = (byte)((x >> 8) & 0xFF);
                                    temp[3] = (byte)(x & 0xFF);
                                    temp[4] = (byte)((y >> 8) & 0xFF);
                                    temp[5] = (byte)(y & 0xFF);
                                    temp[6] = 0;
                                    temp[7] = 0x1C;
                                    temp[8] = 0;
                                    temp[9] = 0x1C;

                                    Array.Copy(temp, 0, fontPage, j, temp.Length);
                                }
                            }

                            imgComCharIndex++;
                        }

                        j += 10;
                        pageCharIndex++;
                    }

                    Array.Copy(fontPage, 0, byData, picPos[i], fontPage.Length);
                }

                File.WriteAllBytes(fontInfoFile, byData);
            }
            catch (Exception me)
            {
                MessageBox.Show(me.Message + "\n" + me.StackTrace);
                return;
            }
            finally
            {
                if (fs != null)
                {
                    fs.Close();
                }
            }
        }

        /// <summary>
        /// 显示Title信息
        /// </summary>
        /// <param name="jpBytes">日语的字节数</param>
        /// <param name="cnBytes">中文的字节数</param>
        private void DisplayTitle(int jpBytes, int cnBytes)
        {
            if (jpBytes < cnBytes)
            {
                this.Text = "Bio0文本编辑 翻译的文本数增加了：" + (cnBytes - jpBytes) + "文字！游戏可能无法运行！";
            }
            else if (jpBytes > cnBytes)
            {
                this.Text = "Bio0文本编辑 翻译的文本数减少了：" + (cnBytes - jpBytes) + "文字！游戏可能无法运行！";
            }
            else
            {
                this.Text = "Bio0文本编辑 翻译的文本数刚好。";
            }
        }

        /// <summary>
        /// 检查输入的中文长度是否正确
        /// </summary>
        /// <returns>输入的中文长度是否正确</returns>
        private bool CheckCnText()
        {
            int jpLen = this.txtJp.Text.Replace("^", string.Empty).Length;
            int cnLen = this.txtCn.Text.Replace("^", string.Empty).Length;

            if (jpLen < cnLen)
            {
                this.DisplayTitle(jpLen, cnLen);
                return false;
            }
            else
            {
                string[] jpTexts = Regex.Split(this.txtJp.Text, @"\n");
                string[] cnTexts = Regex.Split(this.txtCn.Text, @"\n");
                string jpText = string.Empty;
                string cnText = string.Empty;
                int selectionStart = 0;
                int maxLen = cnTexts.Length;
                while (string.IsNullOrEmpty(cnTexts[maxLen - 1]))
                {
                    maxLen--;
                }
                for (int i = 0; i < maxLen; i++)
                {
                    jpText = jpTexts[i];
                    cnText = cnTexts[i];

                    // 关键字是否被删除的判断
                    string currentChar;
                    string nextChar;
                    StringBuilder keyWordsSb = new StringBuilder();
                    for (int j = 0; j < jpText.Length - 1; j++)
                    {
                        currentChar = jpText.Substring(j, 1);
                        if ("^" == currentChar)
                        {
                            // 关键字的解码
                            keyWordsSb = new StringBuilder();
                            keyWordsSb.Append("^");
                            while ((nextChar = jpText.Substring(++j, 1)) != "^")
                            {
                                keyWordsSb.Append(nextChar);
                            }
                            keyWordsSb.Append("^");

                            if (cnText.IndexOf(keyWordsSb.ToString()) == -1)
                            {
                                this.txtCn.SelectionStart = selectionStart;
                                this.txtCn.SelectionLength = cnText.Length;
                                this.txtCn.SelectionColor = Color.Red;
                                this.txtCn.ScrollToCaret();
                                MessageBox.Show("关键字：" + keyWordsSb.ToString() + "不能被删除！");
                                return false;
                            }
                        }
                    }

                    selectionStart += cnText.Length + 1;
                }

                this.DisplayTitle(0, 0);
                this.txtCn.BackColor = SystemColors.Window;
                return true;
            }
        }

        /// <summary>
        /// 将当前行文本编码
        /// </summary>
        /// <param name="text">当前行文本</param>
        /// <returns>中文编码后的文本</returns>
        private byte[] EncodeLineText(string text)
        {
            List<byte> byData = new List<byte>();

            string currentChar;
            string nextChar;
            int charIndex;
            StringBuilder keyWordsSb = new StringBuilder();
            for (int i = 0; i < text.Length - 1; i++)
            {
                currentChar = text.Substring(i, 1);
                if ("^" == currentChar)
                {
                    // 关键字的解码
                    keyWordsSb = new StringBuilder();
                    while ((nextChar = text.Substring(++i, 1)) != "^")
                    {
                        keyWordsSb.Append(nextChar);
                    }

                    string[] keyWords = keyWordsSb.ToString().Split(' ');
                    foreach (string keyWord in keyWords)
                    {
                        charIndex = Convert.ToInt32(keyWord, 16);
                        byData.Add((byte)(charIndex & 0xFF));
                    }

                    continue;
                }
                else
                {
                    byData.AddRange(this.GetCharIndex(currentChar));
                }
            }

            return byData.ToArray();
        }

        /// <summary>
        /// 取得当前文字的索引
        /// </summary>
        /// <param name="currenChar"></param>
        /// <returns></returns>
        private byte[] GetCharIndex(string currentChar)
        {
            // 先在共通字库中查找
            for (int i = 0; i < this.cCharPage.Length; i++)
            {
                if (currentChar == this.cCharPage[i])
                {
                    return new byte[] { (byte)i };
                }
            }
            for (int i = 0; i < this.cCharPage60.Length; i++)
            {
                if (currentChar == this.cCharPage60[i])
                {
                    return new byte[] { (byte)0x60, (byte)i };
                }
            }
            for (int i = 0; i < this.cCharPage61.Length; i++)
            {
                if (currentChar == this.cCharPage61[i])
                {
                    return new byte[] { (byte)0x61, (byte)i };
                }
            }

            // 在自己的字库中查找
            foreach (int fontPage in this.cnFontCharPage.Keys)
            {
                Bio0CharInfo[] pageFonts = this.cnFontCharPage[fontPage];
                for (int i = 0; i < pageFonts.Length; i++)
                {
                    if (!pageFonts[i].IsUseSecondImg)
                    {
                        continue;
                    }

                    if (currentChar == pageFonts[i].FontChar)
                    {
                        if (fontPage == 0)
                        {
                            return new byte[] { (byte)i };
                        }
                        else
                        {
                            return new byte[] { (byte)fontPage, (byte)i };
                        }
                    }
                    else if (pageFonts[i].FontChar == "*")
                    {
                        pageFonts[i].FontChar = currentChar;
                        return new byte[] { (byte)fontPage, (byte)i };
                    }
                }
            }

            throw new Exception("未查询到相应的中文字符！");
        }

        /// <summary>
        /// 将中文文本转换成二进制数据
        /// </summary>
        /// <param name="cnBytes">中文的字节数据</param>
        /// <returns></returns>
        private bool EncodeCnText(List<byte> cnBytes, string jpAllText, string cnAllText, bool hasEntry)
        {
            string[] jpTexts = Regex.Split(jpAllText.Replace("\n", string.Empty), "<BR>");
            string[] cnTexts = Regex.Split(cnAllText.Replace("\n", string.Empty), "<BR>");
            this.textEntrys.Clear();

            int maxLen = cnTexts.Length;
            while (string.IsNullOrEmpty(cnTexts[maxLen - 1]))
            {
                maxLen--;
            }

            for (int i = 0; i < maxLen; i++)
            {
                string jpText = jpTexts[i];
                string cnText = cnTexts[i];

                if (hasEntry)
                {
                    // 保存所有的Entry的偏移
                    this.textEntrys.Add((maxLen + 1) * 4 + cnBytes.Count);
                }

                // 将当前行文本编码
                cnBytes.AddRange(this.EncodeLineText(cnText));
            }

            return true;
        }

        /// <summary>
        /// 保存翻译
        /// </summary>
        /// <param name="cnBytes">翻译的字节数据</param>
        private void Save(List<byte> cnBytes, bool hasEntry)
        {
            FileStream fs = null;

            try
            {
                // 将文件中的数据，循环读取到byData中
                fs = new FileStream(this.cnText, FileMode.Open);
                byte[] byData = new byte[fs.Length];
                fs.Read(byData, 0, byData.Length);
                fs.Close();

                int startPos = this.inputCnStartPos;
                int maxLen = this.inputCnEndPos;

                byte[] byCnData = null;
                if (hasEntry)
                {
                    // 如果是带Entry的Message，先保存修改后的各个Entry
                    int entrysCount = this.textEntrys.Count;
                    byCnData = new byte[(entrysCount + 1) * 4 + cnBytes.Count];
                    byCnData[0] = (byte)((entrysCount >> 24) & 0xFF);
                    byCnData[1] = (byte)((entrysCount >> 16) & 0xFF);
                    byCnData[2] = (byte)((entrysCount >> 8) & 0xFF);
                    byCnData[3] = (byte)(entrysCount & 0xFF);
                    for (int i = 0; i < entrysCount; i++)
                    {
                        int entryPos = this.textEntrys[i];
                        byCnData[4 + i * 4] = (byte)((entryPos >> 24) & 0xFF);
                        byCnData[4 + i * 4 + 1] = (byte)((entryPos >> 16) & 0xFF);
                        byCnData[4 + i * 4 + 2] = (byte)((entryPos >> 8) & 0xFF);
                        byCnData[4 + i * 4 + 3] = (byte)(entryPos & 0xFF);
                    }

                    // 再保存文本数据
                    Array.Copy(cnBytes.ToArray(), 0, byCnData, (entrysCount + 1) * 4, cnBytes.Count);
                }
                else
                {
                    byCnData = new byte[cnBytes.Count];
                    Array.Copy(cnBytes.ToArray(), 0, byCnData, 0, cnBytes.Count);
                }

                // 复制修改的部分
                Array.Copy(byCnData, 0, byData, startPos, byCnData.Length);

                // 翻译后的字节数组写入文件
                File.WriteAllBytes(this.cnText, byData);

                // 显示Title信息
                this.DisplayTitle(this.inputCnEndPos - this.inputCnStartPos, cnBytes.Count);

                // 写字库文件
                List<Bio0CharInfo> cnFont = new List<Bio0CharInfo>();
                foreach (int fontPage in this.cnFontCharPage.Keys)
                {
                    Bio0CharInfo[] pageFonts = this.cnFontCharPage[fontPage];
                    for (int i = 0; i < pageFonts.Length; i++)
                    {
                        if (pageFonts[i].IsUseSecondImg)
                        {
                            cnFont.Add(pageFonts[i]);
                        }
                    }
                }

                string[] cnFontNew = File.ReadAllLines(this.cnFont, Encoding.UTF8);
                for (int i = 0; i < cnFont.Count; i++)
                {
                    Bio0CharInfo charInfo = cnFont[i];
                    int charIndex = charInfo.Y / 0x1C * 32 + charInfo.X / 0x1C;
                    if (charIndex < cnFontNew.Length)
                    {
                        cnFontNew[charIndex] = charInfo.FontChar;
                    }
                }

                File.WriteAllLines(this.cnFont, cnFontNew, Encoding.UTF8);
            }
            catch (Exception me)
            {
                MessageBox.Show(me.Message + "\n" + me.StackTrace);
            }
            finally
            {
                if (fs != null)
                {
                    fs.Close();
                }
            }
        }

        /// <summary>
        /// 导出文本
        /// </summary>
        private void ExoprtText()
        {
            Microsoft.Office.Interop.Excel.Application xApp = null;
            Microsoft.Office.Interop.Excel.Workbook xBook = null;
            Microsoft.Office.Interop.Excel.Worksheet xSheet = null;

            // 设定保存的文件名
            //string fileName = @"E:\My\Hanhua\testFile\Biohazard_0\Cn\Bio0Text.xls";
            string fileName = @"D:\game\iso\wii\生化危机0汉化\Bio0Text_" + this.exportName + ".xls";

            // 先删除原来的文件
            File.Delete(fileName);

            // 显示进度条
            this.ResetProcessBar(this.fileList.Items.Count);

            try
            {
                // 创建Application对象 
                xApp = new Microsoft.Office.Interop.Excel.ApplicationClass();
                //xApp.Visible = true;

                // 追加一个WorkBook
                xBook = xApp.Workbooks.Add(Missing.Value);

                for (int j = 0; j < this.fileList.Items.Count; j++)
                {
                    // 追加一个Sheet
                    FilePosInfo filePosInfo = this.textFiles[j];
                    if (filePosInfo.TextType != Bio0TextType.Scene)
                    {
                        continue;
                    }

                    // 更新当前文本
                    this.fileList.SelectedIndex = j;

                    // 取得日文、中文文本
                    string jpText = this.txtJp.Text;
                    string cnText = this.txtCn.Text;

                    string sheetName = Util.GetShortFileName(filePosInfo.File);
                    int sameNameCount = 0;
                    for (int i = 0; i < j; i++)
                    {
                        if (Util.GetShortFileName(this.textFiles[i].File).IndexOf(sheetName) >= 0)
                        {
                            sameNameCount++;
                        }
                    }

                    xSheet = (Microsoft.Office.Interop.Excel.Worksheet)xBook.Sheets.Add(Missing.Value, Missing.Value, Missing.Value, Missing.Value);
                    xSheet.Name = sheetName + (sameNameCount > 0 ? "_" + sameNameCount.ToString().PadLeft(2, '0') : string.Empty);

                    // 将每行文本保存到Sheet中
                    string[] jpTexts = jpText.Split('\n');
                    string[] cnTexts = cnText.Split('\n');
                    for (int i = 0; i < jpTexts.Length; i++)
                    {
                        // 写入日文文本
                        Microsoft.Office.Interop.Excel.Range rngJp = xSheet.get_Range("A" + (i + 1), Missing.Value);
                        rngJp.Value2 = jpTexts[i];
                    }
                    for (int i = 0; i < cnTexts.Length; i++)
                    {
                        // 写入中文文本
                        Microsoft.Office.Interop.Excel.Range rngCn = xSheet.get_Range("G" + (i + 1), Missing.Value);
                        rngCn.Value2 = cnTexts[i];
                    }

                    // 更新进度条
                    this.ProcessBarStep();
                }

                // 保存
                xSheet.SaveAs(
                    fileName,
                    Missing.Value, Missing.Value, Missing.Value, Missing.Value,
                    Missing.Value, Missing.Value, Missing.Value, Missing.Value, Missing.Value);

                // 隐藏进度条
                this.CloseProcessBar();

                // 显示保存完成信息
                MessageBox.Show("导出完成！");

            }
            catch (Exception me)
            {
                MessageBox.Show(this.baseFile + "\n" + me.Message);
            }
            finally
            {
                // 隐藏进度条
                this.CloseProcessBar();

                // 清空各种对象
                xSheet = null;
                xBook = null;
                if (xApp != null)
                {
                    xApp.Quit();
                    xApp = null;
                }
            }
        }

        /// <summary>
        /// 导入文本
        /// </summary>
        private void ImportText(string fileName)
        {
            Microsoft.Office.Interop.Excel.Application xApp = null;
            Microsoft.Office.Interop.Excel.Workbook xBook = null;
            Microsoft.Office.Interop.Excel.Worksheet xSheet = null;

            // 显示进度条
            this.ResetProcessBar(this.fileList.Items.Count);

            try
            {
                StringBuilder failFiles = new StringBuilder();

                // 创建Application对象 
                xApp = new Microsoft.Office.Interop.Excel.ApplicationClass();

                // 得到WorkBook对象, 打开已有的文件 
                xBook = xApp.Workbooks._Open(
                    fileName,
                    Missing.Value, Missing.Value, Missing.Value, Missing.Value
                    , Missing.Value, Missing.Value, Missing.Value, Missing.Value
                    , Missing.Value, Missing.Value, Missing.Value, Missing.Value);

                for (int i = xBook.Sheets.Count; i >= 1; i--)
                {
                    // 取得相应的Sheet
                    xSheet = (Microsoft.Office.Interop.Excel.Worksheet)xBook.Sheets[i];
                    int sheetIndex = -1;
                    string sheetName = string.Empty;
                    for (int j = 0; j < this.fileList.Items.Count; j++)                    
                    {
                        sheetName = Util.GetShortFileName(this.textFiles[j].File);
                        if (xSheet.Name.IndexOf(sheetName) >= 0)
                        {
                            if (xSheet.Name.IndexOf("main.dol") >= 0)
                            {
                                if ((xSheet.Name == "main.dol" && string.IsNullOrEmpty(this.textFiles[j].SubIndex))
                                    || (!string.IsNullOrEmpty(this.textFiles[j].SubIndex) && xSheet.Name.IndexOf(this.textFiles[j].SubIndex) >= 0))
                                {
                                    sheetIndex = j;
                                    break;
                                }
                            }
                            else
                            {
                                sheetIndex = j;
                                break;
                            }
                        }
                    }

                    if (sheetIndex > -1)
                    {
                        // 更新当前文本
                        this.fileList.SelectedIndex = sheetIndex;

                        // 取得当前Sheet的中文文本
                        int lineNum = 1;
                        int blankNum = 0;
                        StringBuilder sb = new StringBuilder();
                        while (blankNum < 4)
                        {
                            string cellValue = xSheet.get_Range("G" + lineNum, Missing.Value).Value2 as string;
                            sb.Append(cellValue).Append("\n");

                            if (string.IsNullOrEmpty(cellValue))
                            {
                                blankNum++;
                            }
                            else
                            {
                                blankNum = 0;
                            }

                            lineNum++;
                        }

                        sb = sb.Replace("\n\n\n\n\n", "\n");

                        this.txtCn.Text = sb.ToString();

                        // 保存
                        if (!this.Save())
                        {
                            //return;
                            throw new Exception("有文件长度检查失败");
                            //failFiles.Append("\n").Append(sheetName);
                        }
                    }

                    // 更新进度条
                    this.ProcessBarStep();
                }

                // 隐藏进度条
                this.CloseProcessBar();

                // 显示保存完成信息
                if (failFiles.Length == 0)
                {
                    MessageBox.Show("完全成功导入！");
                }
                else
                {
                    MessageBox.Show("导入完成，下面文件失败" + failFiles.ToString());
                }

                // 重新读取字库信息
                this.ReadFontChar();
            }
            catch (Exception me)
            {
                MessageBox.Show(this.baseFile + "\n" + me.Message);
            }
            finally
            {
                // 隐藏进度条
                this.CloseProcessBar();

                // 清空各种对象
                xSheet = null;
                xBook = null;
                if (xApp != null)
                {
                    xApp.Quit();
                    xApp = null;
                }
            }
        }

        /// <summary>
        /// 导入文本
        /// </summary>
        private void CheckImportTextCharCount(string fileName)
        {
            Microsoft.Office.Interop.Excel.Application xApp = null;
            Microsoft.Office.Interop.Excel.Workbook xBook = null;
            Microsoft.Office.Interop.Excel.Worksheet xSheet = null;

            // 显示进度条
            this.ResetProcessBar(this.fileList.Items.Count);

            try
            {
                StringBuilder failFiles = new StringBuilder();
                Dictionary<string, int> fontCharInfo = new Dictionary<string, int>();
                string currentChar;
                string nextChar;

                // 创建Application对象 
                xApp = new Microsoft.Office.Interop.Excel.ApplicationClass();

                // 得到WorkBook对象, 打开已有的文件 
                xBook = xApp.Workbooks._Open(
                    fileName,
                    Missing.Value, Missing.Value, Missing.Value, Missing.Value
                    , Missing.Value, Missing.Value, Missing.Value, Missing.Value
                    , Missing.Value, Missing.Value, Missing.Value, Missing.Value);

                for (int j = 1; j <= xBook.Sheets.Count; j++)
                {
                    xSheet = (Microsoft.Office.Interop.Excel.Worksheet)xBook.Sheets[j];

                    // 取得当前Sheet的中文文本
                    int lineNum = 1;
                    int blankNum = 0;
                    StringBuilder sb = new StringBuilder();
                    while (blankNum < 4)
                    {
                        string cellValue = xSheet.get_Range("G" + lineNum, Missing.Value).Value2 as string;
                        sb.Append(cellValue).Append("\n");

                        if (string.IsNullOrEmpty(cellValue))
                        {
                            blankNum++;
                        }
                        else
                        {
                            blankNum = 0;
                        }

                        lineNum++;
                    }

                    sb = sb.Replace("\n\n\n\n\n", "\n");

                    // 测试有多少个字符
                    string testCnText = sb.ToString();
                    for (int i = 0; i < testCnText.Length - 1; i++)
                    {
                        currentChar = testCnText.Substring(i, 1);
                        if ("^" == currentChar)
                        {
                            // 关键字的解码
                            while ((nextChar = testCnText.Substring(++i, 1)) != "^")
                            {
                            }

                            continue;
                        }
                        else if (!this.cCharPage.Contains(currentChar) && !this.cCharPage60.Contains(currentChar) && !this.cCharPage61.Contains(currentChar))
                        {
                            if (fontCharInfo.ContainsKey(currentChar))
                            {
                                fontCharInfo[currentChar] = fontCharInfo[currentChar] + 1;
                            }
                            else
                            {
                                fontCharInfo[currentChar] = 1;
                            }
                        }
                    }

                    // 更新进度条
                    this.ProcessBarStep();
                }

                // 隐藏进度条
                this.CloseProcessBar();

                // 清空各种对象
                xSheet = null;
                xBook = null;
                if (xApp != null)
                {
                    xApp.Quit();
                    xApp = null;
                }

                // 测试有多少个字符
                //Dictionary<string, int> fontCharInfo1 = (from d in fontCharInfo
                //                                         orderby d.Value descending
                //                                         select d).ToDictionary(k => k.Key, v => v.Value);
                string[] fontChars = (from d in fontCharInfo
                                      orderby d.Value
                                      select d.Key + " " + d.Value).ToArray();
                //File.WriteAllLines(@"..\BioTools\Bio0Edit\Bio0ChkFontChar.txt", fontChars, Encoding.UTF8);

                if (fontChars.Length > 672)
                {
                    MessageBox.Show("超过了：" + (fontChars.Length - 672));
                }
                
            }
            catch (Exception me)
            {
                MessageBox.Show(this.baseFile + "\n" + me.Message);
            }
            finally
            {
                // 隐藏进度条
                this.CloseProcessBar();

                // 清空各种对象
                xSheet = null;
                xBook = null;
                if (xApp != null)
                {
                    xApp.Quit();
                    xApp = null;
                }
            }
        }

        /// <summary>
        /// 生成新的Message文件
        /// </summary>
        /// <param name="folder"></param>
        private void CreateMessge(string folder)
        {
            string[] messageFiles = new string[] { "commonms", "saveload", "savepoint", "blend", "savepoinbma", "file_tex", "item_name", "item_tex", "status_m", "option", "omake" };

            FileStream fs = null;
            try
            {
                // 读取Message信息
                fs = new FileStream(folder + @"\message.arc", FileMode.Open);
                byte[] byMessage = new byte[fs.Length];
                fs.Read(byMessage, 0, byMessage.Length);
                fs.Close();
                fs = null;

                // 开始对各个文件进行压缩
                int totalSize = 0;
                List<byte[]> fileData = new List<byte[]>();
                List<int> realLen = new List<int>();
                foreach (string fileName in messageFiles)
                {
                    string decFile = folder + @"\Decompress\" + fileName + "_cn";
                    byte[] byData = null;
                    if (fileName == "savepoinbma")
                    {
                        fs = new FileStream(decFile, FileMode.Open);
                        byData = new byte[fs.Length];
                        fs.Read(byData, 0, byData.Length);
                        fs.Close();
                        fs = null;

                        realLen.Add(byData.Length);
                    }
                    else
                    {
                        byData = this.comp.Compress(decFile, 0);
                        realLen.Add(byData.Length);
                    }

                    // 调整大小
                    byData = this.ResetDataSize(byData);

                    totalSize += byData.Length;
                    fileData.Add(byData);
                }

                // 开始生产新的Message文件
                //byte[] byNewMes = new byte[totalSize + 0x20 * 12];
                byte[] byNewMes = new byte[byMessage.Length];
                Array.Copy(byMessage, 0, byNewMes, 0, 0x20 * 12);
                int filePos = 0x20;
                //int copyPos = 0x20 * 12;
                for (int i = 0; i < fileData.Count; i++)
                {
                    int copyPos = (byMessage[filePos] << 24) | (byMessage[filePos + 1] << 16) | (byMessage[filePos + 2] << 8) | byMessage[filePos + 3];

                    // Copy当前文件数据
                    byte[] byData = fileData[i];
                    Array.Copy(byData, 0, byNewMes, copyPos, byData.Length);

                    // 重写当前文件位置信息
                    byNewMes[filePos] = (byte)((copyPos >> 24) & 0xFF);
                    byNewMes[filePos + 1] = (byte)((copyPos >> 16) & 0xFF);
                    byNewMes[filePos + 2] = (byte)((copyPos >> 8) & 0xFF);
                    byNewMes[filePos + 3] = (byte)(copyPos & 0xFF);

                    byNewMes[filePos + 4] = (byte)((realLen[i] >> 24) & 0xFF);
                    byNewMes[filePos + 5] = (byte)((realLen[i] >> 16) & 0xFF);
                    byNewMes[filePos + 6] = (byte)((realLen[i] >> 8) & 0xFF);
                    byNewMes[filePos + 7] = (byte)(realLen[i] & 0xFF);

                    filePos += 0x20;
                    //copyPos += byData.Length;
                }

                File.WriteAllBytes(folder + @"\NewMessage.arc", byNewMes);
            }
            catch (Exception me)
            {
                MessageBox.Show(me.Message + "\n" + me.StackTrace);
            }
            finally
            {
                if (fs != null)
                {
                    fs.Close();
                }
            }
        }

        /// <summary>
        /// 重新设置数组大小，到达整16的倍数
        /// </summary>
        /// <param name="byData"></param>
        /// <returns></returns>
        private byte[] ResetDataSize(byte[] byData)
        {
            int len = byData.Length;
            if ((len & 0xF) == 0)
            {
                return byData;
            }

            byte[] newData = new byte[(len + 0x10) & 0xFFF0];
            Array.Copy(byData, 0, newData, 0, byData.Length);

            return newData;
        }

        #endregion
    }
}
